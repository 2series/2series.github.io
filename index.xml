<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rihad Variawa on Rihad Variawa</title>
    <link>/</link>
    <description>Recent content in Rihad Variawa on Rihad Variawa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sales Analysis</title>
      <link>/post/sales_analysis/sales-analysis/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/sales_analysis/sales-analysis/</guid>
      <description>


&lt;div id=&#34;sample-sales-data-order-info-sales-customer-shipping-etc.-used-for-segmentation-customer-analytics-clustering-and-more.-inspired-for-retail-analytics.-this-was-originally-used-for-pentaho-di-kettle-but-i-found-the-set-could-be-useful-for-sales-simulation-training.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sample Sales Data, Order Info, Sales, Customer, Shipping, etc., Used for Segmentation, Customer Analytics, Clustering and More. Inspired for retail analytics. This was originally used for Pentaho DI Kettle, But I found the set could be useful for Sales Simulation training.&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;originally-written-by-maria-carina-roldan-pentaho-community-member-bi-consultant-assert-solutions-argentina.-this-work-is-licensed-under-the-creative-commons-attribution-noncommercial-share-alike-3.0-unported-license.-modified-by-gus-segura-june-2014.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Originally Written by María Carina Roldán, Pentaho Community Member, BI consultant (Assert Solutions), Argentina. This work is licensed under the Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License. Modified by Gus Segura June 2014.&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;taken-from-the-link&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Taken from the &lt;a href=&#34;https://www.kaggle.com/kyanyoga/sample-sales-data/version/1#_=_&#34;&gt;link&lt;/a&gt;&lt;/h3&gt;
&lt;div id=&#34;reading-in-a-csv-file&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Reading in a csv file&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales_data &amp;lt;- read.csv(&amp;#39;sales_data_sample.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sales_data is a ‘data.frame’. It is the main way that R deals with tables of data.
Click on the arrow next to sales_data in the Environment pane to see the data types of each column
Click on sales_data in the Environment pane to see the table. You can also type View(sales_data) to do this.&lt;/p&gt;
&lt;p&gt;Run summary to see a summary of the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(sales_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ORDERNUMBER    QUANTITYORDERED   PRICEEACH      ORDERLINENUMBER 
##  Min.   :10100   Min.   : 6.00   Min.   : 26.88   Min.   : 1.000  
##  1st Qu.:10180   1st Qu.:27.00   1st Qu.: 68.86   1st Qu.: 3.000  
##  Median :10262   Median :35.00   Median : 95.70   Median : 6.000  
##  Mean   :10259   Mean   :35.09   Mean   : 83.66   Mean   : 6.466  
##  3rd Qu.:10334   3rd Qu.:43.00   3rd Qu.:100.00   3rd Qu.: 9.000  
##  Max.   :10425   Max.   :97.00   Max.   :100.00   Max.   :18.000  
##                                                                   
##      SALES                   ORDERDATE           STATUS    
##  Min.   :  482.1   11/14/2003 0:00:  38   Cancelled :  60  
##  1st Qu.: 2203.4   11/24/2004 0:00:  35   Disputed  :  14  
##  Median : 3184.8   11/12/2003 0:00:  34   In Process:  41  
##  Mean   : 3553.9   11/17/2004 0:00:  32   On Hold   :  44  
##  3rd Qu.: 4508.0   11/4/2004 0:00 :  29   Resolved  :  47  
##  Max.   :14082.8   10/16/2004 0:00:  28   Shipped   :2617  
##                    (Other)        :2627                    
##      QTR_ID         MONTH_ID         YEAR_ID               PRODUCTLINE 
##  Min.   :1.000   Min.   : 1.000   Min.   :2003   Classic Cars    :967  
##  1st Qu.:2.000   1st Qu.: 4.000   1st Qu.:2003   Motorcycles     :331  
##  Median :3.000   Median : 8.000   Median :2004   Planes          :306  
##  Mean   :2.718   Mean   : 7.092   Mean   :2004   Ships           :234  
##  3rd Qu.:4.000   3rd Qu.:11.000   3rd Qu.:2004   Trains          : 77  
##  Max.   :4.000   Max.   :12.000   Max.   :2005   Trucks and Buses:301  
##                                                  Vintage Cars    :607  
##       MSRP         PRODUCTCODE                         CUSTOMERNAME 
##  Min.   : 33.0   S18_3232:  52   Euro Shopping Channel       : 259  
##  1st Qu.: 68.0   S10_1949:  28   Mini Gifts Distributors Ltd.: 180  
##  Median : 99.0   S10_4962:  28   Australian Collectors, Co.  :  55  
##  Mean   :100.7   S12_1666:  28   La Rochelle Gifts           :  53  
##  3rd Qu.:124.0   S18_1097:  28   AV Stores, Co.              :  51  
##  Max.   :214.0   S18_2432:  28   Land of Toys Inc.           :  49  
##                  (Other) :2631   (Other)                     :2176  
##             PHONE                            ADDRESSLINE1 
##  (91) 555 94 44: 259   C/ Moralzarzal, 86          : 259  
##  4155551450    : 180   5677 Strong St.             : 180  
##  03 9520 4555  :  55   636 St Kilda Road           :  55  
##  40.67.8555    :  53   67, rue des Cinquante Otages:  53  
##  (171) 555-1555:  51   Fauntleroy Circus           :  51  
##  6175558555    :  51   897 Long Airport Avenue     :  49  
##  (Other)       :2174   (Other)                     :2176  
##     ADDRESSLINE2             CITY           STATE        POSTALCODE  
##           :2521   Madrid       : 304           :1486   28034  : 259  
##  Level 3  :  55   San Rafael   : 180   CA      : 416   97562  : 205  
##  Suite 400:  48   NYC          : 152   MA      : 190   10022  : 152  
##  Level 15 :  46   Singapore    :  79   NY      : 178   94217  :  89  
##  Level 6  :  46   Paris        :  70   NSW     :  92          :  76  
##  2nd Floor:  36   San Francisco:  62   Victoria:  78   50553  :  61  
##  (Other)  :  71   (Other)      :1976   (Other) : 383   (Other):1981  
##       COUNTRY     TERRITORY    CONTACTLASTNAME CONTACTFIRSTNAME
##  USA      :1004   APAC : 221   Freyre : 259    Diego  : 259    
##  Spain    : 342   EMEA :1407   Nelson : 204    Valarie: 257    
##  France   : 314   Japan: 121   Young  : 115    Julie  : 117    
##  Australia: 185   NA&amp;#39;s :1074   Frick  :  91    Michael:  84    
##  UK       : 144                Brown  :  88    Sue    :  84    
##  Italy    : 113                Yu     :  80    Juri   :  60    
##  (Other)  : 721                (Other):1986    (Other):1962    
##    DEALSIZE   
##  Large : 157  
##  Medium:1384  
##  Small :1282  
##               
##               
##               
## &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or can run summary on individual columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(sales_data$PRICEEACH)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   26.88   68.86   95.70   83.66  100.00  100.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(sales_data$PRODUCTLINE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Classic Cars      Motorcycles           Planes            Ships 
##              967              331              306              234 
##           Trains Trucks and Buses     Vintage Cars 
##               77              301              607&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max(sales_data$SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14082.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(sales_data$SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3553.889&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;min(sales_data$SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 482.13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(sales_data$SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1841.865&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will now go through select(), arrange(), filter(), mutate(), group_by(), summarise()&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;select() function
select specific columns
first argument is always the dataset, and each argument after is the fields you want&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(sales_data, QUANTITYORDERED, PRICEEACH)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      QUANTITYORDERED PRICEEACH
## 1                 30     95.70
## 2                 34     81.35
## 3                 41     94.74
## 4                 45     83.26
## 5                 49    100.00
## 6                 36     96.66
## 7                 29     86.13
## 8                 48    100.00
## 9                 22     98.57
## 10                41    100.00
## 11                37    100.00
## 12                23    100.00
## 13                28    100.00
## 14                34    100.00
## 15                45     92.83
## 16                36    100.00
## 17                23    100.00
## 18                41    100.00
## 19                46     94.74
## 20                42    100.00
## 21                41    100.00
## 22                20     72.55
## 23                21     34.91
## 24                42     76.36
## 25                24    100.00
## 26                66    100.00
## 27                26    100.00
## 28                29    100.00
## 29                38    100.00
## 30                37    100.00
## 31                45    100.00
## 32                21    100.00
## 33                34    100.00
## 34                23    100.00
## 35                42    100.00
## 36                47    100.00
## 37                35    100.00
## 38                29    100.00
## 39                34    100.00
## 40                32    100.00
## 41                21    100.00
## 42                34    100.00
## 43                37    100.00
## 44                47    100.00
## 45                48    100.00
## 46                40    100.00
## 47                26    100.00
## 48                30    100.00
## 49                32    100.00
## 50                41    100.00
## 51                36    100.00
## 52                24    100.00
## 53                23    100.00
## 54                50    100.00
## 55                39     99.91
## 56                29     96.34
## 57                27    100.00
## 58                37    100.00
## 59                37    100.00
## 60                27    100.00
## 61                42    100.00
## 62                38     96.34
## 63                24    100.00
## 64                23    100.00
## 65                47    100.00
## 66                22    100.00
## 67                44    100.00
## 68                40    100.00
## 69                22    100.00
## 70                47    100.00
## 71                39     96.34
## 72                34    100.00
## 73                45    100.00
## 74                20    100.00
## 75                40     68.92
## 76                26     51.15
## 77                39    100.00
## 78                50     44.51
## 79                45    100.00
## 80                45    100.00
## 81                27    100.00
## 82                46    100.00
## 83                31    100.00
## 84                33    100.00
## 85                22    100.00
## 86                20    100.00
## 87                41    100.00
## 88                45    100.00
## 89                49    100.00
## 90                34    100.00
## 91                49    100.00
## 92                39    100.00
## 93                43    100.00
## 94                41    100.00
## 95                36    100.00
## 96                27    100.00
## 97                29    100.00
## 98                20    100.00
## 99                37    100.00
## 100               26    100.00
## 101               39     76.67
## 102               22    100.00
## 103               22    100.00
## 104               21     86.77
## 105               66    100.00
## 106               56    100.00
## 107               50    100.00
## 108               46    100.00
## 109               33    100.00
## 110               49    100.00
## 111               32    100.00
## 112               44    100.00
## 113               24    100.00
## 114               26    100.00
## 115               45    100.00
## 116               39    100.00
## 117               49    100.00
## 118               20    100.00
## 119               27    100.00
## 120               30    100.00
## 121               25    100.00
## 122               24    100.00
## 123               22    100.00
## 124               33    100.00
## 125               47     64.93
## 126               25     48.05
## 127               26     75.47
## 128               48     54.68
## 129               39    100.00
## 130               34    100.00
## 131               32    100.00
## 132               64    100.00
## 133               19    100.00
## 134               42    100.00
## 135               31    100.00
## 136               22    100.00
## 137               26    100.00
## 138               20    100.00
## 139               21    100.00
## 140               33    100.00
## 141               28    100.00
## 142               26    100.00
## 143               31    100.00
## 144               48    100.00
## 145               50    100.00
## 146               28    100.00
## 147               26    100.00
## 148               32    100.00
## 149               44    100.00
## 150               30    100.00
## 151               38    100.00
## 152               40    100.00
## 153               46     61.99
## 154               26    100.00
## 155               27    100.00
## 156               43    100.00
## 157               35     65.63
## 158               37    100.00
## 159               37     46.90
## 160               27    100.00
## 161               38    100.00
## 162               33    100.00
## 163               42    100.00
## 164               42    100.00
## 165               48    100.00
## 166               41    100.00
## 167               30    100.00
## 168               27    100.00
## 169               21    100.00
## 170               20    100.00
## 171               41    100.00
## 172               27    100.00
## 173               28    100.00
## 174               24    100.00
## 175               44    100.00
## 176               50    100.00
## 177               21    100.00
## 178               33    100.00
## 179               33    100.00
## 180               31    100.00
## 181               41     71.47
## 182               45     79.65
## 183               33     85.39
## 184               45     76.00
## 185               26     99.04
## 186               12    100.00
## 187               41    100.00
## 188               33    100.00
## 189               46    100.00
## 190               33    100.00
## 191               20    100.00
## 192               44    100.00
## 193               33    100.00
## 194               21    100.00
## 195               47    100.00
## 196               46    100.00
## 197               32    100.00
## 198               42    100.00
## 199               44    100.00
## 200               35    100.00
## 201               41    100.00
## 202               46    100.00
## 203               31    100.00
## 204               38    100.00
## 205               42     64.00
## 206               33     57.22
## 207               48     52.36
## 208               42    100.00
## 209               32    100.00
## 210               34    100.00
## 211               33     69.12
## 212               36    100.00
## 213               27    100.00
## 214               21    100.00
## 215               21    100.00
## 216               38    100.00
## 217               30    100.00
## 218               49    100.00
## 219               43    100.00
## 220               41    100.00
## 221               38    100.00
## 222               28    100.00
## 223               43    100.00
## 224               25    100.00
## 225               38    100.00
## 226               41    100.00
## 227               28    100.00
## 228               25    100.00
## 229               41    100.00
## 230               39    100.00
## 231               21    100.00
## 232               27    100.00
## 233               33     99.21
## 234               29    100.00
## 235               49    100.00
## 236               49    100.00
## 237               20    100.00
## 238               39     63.20
## 239               40    100.00
## 240               49    100.00
## 241               21    100.00
## 242               50    100.00
## 243               20    100.00
## 244               49    100.00
## 245               38    100.00
## 246               35    100.00
## 247               40    100.00
## 248               28    100.00
## 249               25    100.00
## 250               36    100.00
## 251               43    100.00
## 252               32    100.00
## 253               46    100.00
## 254               48    100.00
## 255               43    100.00
## 256               49    100.00
## 257               24    100.00
## 258               26    100.00
## 259               30    100.00
## 260               24    100.00
## 261               55    100.00
## 262               22    100.00
## 263               49     78.92
## 264               44    100.00
## 265               66    100.00
## 266               21    100.00
## 267               34    100.00
## 268               43    100.00
## 269               46    100.00
## 270               33    100.00
## 271               42    100.00
## 272               34    100.00
## 273               47    100.00
## 274               33    100.00
## 275               24    100.00
## 276               26    100.00
## 277               30    100.00
## 278               43    100.00
## 279               25    100.00
## 280               27    100.00
## 281               27    100.00
## 282               24    100.00
## 283               34    100.00
## 284               46    100.00
## 285               27     54.33
## 286               33    100.00
## 287               47    100.00
## 288               49     55.34
## 289               40    100.00
## 290               37    100.00
## 291               47    100.00
## 292               45    100.00
## 293               37     99.82
## 294               48    100.00
## 295               31    100.00
## 296               46    100.00
## 297               47    100.00
## 298               28    100.00
## 299               40    100.00
## 300               20    100.00
## 301               39    100.00
## 302               25     99.82
## 303               29    100.00
## 304               22    100.00
## 305               22    100.00
## 306               47    100.00
## 307               45    100.00
## 308               29    100.00
## 309               24    100.00
## 310               35    100.00
## 311               46     83.63
## 312               44     95.93
## 313               34     96.73
## 314               35    100.00
## 315               25     72.38
## 316               10    100.00
## 317               29    100.00
## 318               39    100.00
## 319               42    100.00
## 320               46    100.00
## 321               49    100.00
## 322               27    100.00
## 323               50    100.00
## 324               43    100.00
## 325               38    100.00
## 326               20    100.00
## 327               27    100.00
## 328               49    100.00
## 329               27    100.00
## 330               39    100.00
## 331               24    100.00
## 332               45    100.00
## 333               20    100.00
## 334               36    100.00
## 335               24    100.00
## 336               49     63.38
## 337               26    100.00
## 338               49     62.09
## 339               34    100.00
## 340               34     95.35
## 341               33    100.00
## 342               22    100.00
## 343               39     89.38
## 344               32     63.84
## 345               24     75.01
## 346               21     63.84
## 347               24     73.42
## 348               36     63.84
## 349               20     81.40
## 350               30     64.64
## 351               44     82.99
## 352               28     92.57
## 353               37     77.41
## 354               20     74.21
## 355               25     90.17
## 356               35     76.61
## 357               38     83.79
## 358               41     69.43
## 359               22     76.61
## 360               49     81.40
## 361               38     73.42
## 362               33    100.00
## 363               36     93.56
## 364               34     81.62
## 365               24     67.83
## 366               36     70.26
## 367               34     90.17
## 368               41    100.00
## 369               46    100.00
## 370               24    100.00
## 371               21    100.00
## 372               24    100.00
## 373               48    100.00
## 374               26    100.00
## 375               37    100.00
## 376               49    100.00
## 377               34     99.54
## 378               48    100.00
## 379               36    100.00
## 380               46    100.00
## 381               46    100.00
## 382               31     97.17
## 383               41    100.00
## 384               21    100.00
## 385               38    100.00
## 386               45    100.00
## 387               26     58.38
## 388               38    100.00
## 389               48    100.00
## 390               42     64.16
## 391               49     35.71
## 392               32     66.58
## 393               54    100.00
## 394               33    100.00
## 395               36    100.00
## 396               20    100.00
## 397               29     97.89
## 398               33     97.89
## 399               50    100.00
## 400               41    100.00
## 401               36    100.00
## 402               27    100.00
## 403               47    100.00
## 404               33    100.00
## 405               21    100.00
## 406               21     93.28
## 407               41    100.00
## 408               40    100.00
## 409               28    100.00
## 410               23    100.00
## 411               23    100.00
## 412               25    100.00
## 413               24    100.00
## 414               39     64.74
## 415               55     75.20
## 416               46     88.45
## 417               50    100.00
## 418               47    100.00
## 419               97     93.28
## 420               32    100.00
## 421               35    100.00
## 422               49    100.00
## 423               38    100.00
## 424               32    100.00
## 425               34    100.00
## 426               36     99.17
## 427               48     93.34
## 428               21     96.84
## 429               21     93.34
## 430               34    100.00
## 431               46    100.00
## 432               32    100.00
## 433               29    100.00
## 434               41    100.00
## 435               43     96.84
## 436               24    100.00
## 437               41    100.00
## 438               46     98.00
## 439               32    100.00
## 440               22    100.00
## 441               29     40.25
## 442               42     49.60
## 443               39     98.00
## 444               27    100.00
## 445               48     98.00
## 446               29     85.10
## 447               27    100.00
## 448               54    100.00
## 449               26    100.00
## 450               34    100.00
## 451               25    100.00
## 452               23    100.00
## 453               28    100.00
## 454               35    100.00
## 455               44    100.00
## 456               22    100.00
## 457               42    100.00
## 458               29    100.00
## 459               32    100.00
## 460               41    100.00
## 461               26    100.00
## 462               21    100.00
## 463               34    100.00
## 464               41    100.00
## 465               37    100.00
## 466               37    100.00
## 467               41    100.00
## 468               46    100.00
## 469               40    100.00
## 470               43     97.60
## 471               30     87.06
## 472               35    100.00
## 473               36     93.77
## 474               61    100.00
## 475               38    100.00
## 476               39    100.00
## 477               33     99.66
## 478               32    100.00
## 479               31    100.00
## 480               50    100.00
## 481               48     91.44
## 482               43    100.00
## 483               25     87.33
## 484               28    100.00
## 485               36    100.00
## 486               27     89.38
## 487               25    100.00
## 488               40    100.00
## 489               34     95.55
## 490               50    100.00
## 491               38    100.00
## 492               37     95.55
## 493               43     89.38
## 494               43     86.30
## 495               46     95.13
## 496               42     36.11
## 497               50     50.18
## 498               44    100.00
## 499               27     93.16
## 500               35    100.00
## 501               51     95.55
## 502               41     50.14
## 503               48     49.06
## 504               42     54.99
## 505               49     43.13
## 506               30     58.22
## 507               45     51.21
## 508               48     44.21
## 509               32     54.45
## 510               46     53.37
## 511               48     63.61
## 512               33     43.13
## 513               31     48.52
## 514               20     58.22
## 515               29     51.75
## 516               27     57.68
## 517               24     56.07
## 518               37     48.52
## 519               25     44.21
## 520               41     57.68
## 521               27     89.89
## 522               21     58.95
## 523               22     72.41
## 524               32     98.63
## 525               25     52.83
## 526               42    100.00
## 527               25     51.75
## 528               37    100.00
## 529               26    100.00
## 530               44     99.55
## 531               47    100.00
## 532               43    100.00
## 533               42    100.00
## 534               42    100.00
## 535               29    100.00
## 536               40    100.00
## 537               38    100.00
## 538               38    100.00
## 539               21    100.00
## 540               24    100.00
## 541               36    100.00
## 542               23    100.00
## 543               20    100.00
## 544               32    100.00
## 545               29    100.00
## 546               44    100.00
## 547               44    100.00
## 548               36    100.00
## 549               49     56.30
## 550               34     42.64
## 551               59    100.00
## 552               37    100.00
## 553               36    100.00
## 554               43    100.00
## 555               21    100.00
## 556               32    100.00
## 557               38    100.00
## 558               43    100.00
## 559               42    100.00
## 560               32    100.00
## 561               42    100.00
## 562               31    100.00
## 563               49    100.00
## 564               45    100.00
## 565               49    100.00
## 566               41    100.00
## 567               45    100.00
## 568               36    100.00
## 569               39    100.00
## 570               27    100.00
## 571               25    100.00
## 572               41    100.00
## 573               39     99.52
## 574               28     57.55
## 575               25     54.57
## 576               33    100.00
## 577               34    100.00
## 578               24    100.00
## 579               30    100.00
## 580               42    100.00
## 581               21    100.00
## 582               34    100.00
## 583               29    100.00
## 584               24    100.00
## 585               44    100.00
## 586               21    100.00
## 587               33    100.00
## 588               30    100.00
## 589               26    100.00
## 590               41    100.00
## 591               26    100.00
## 592               32    100.00
## 593               43    100.00
## 594               48    100.00
## 595               44     74.04
## 596               45    100.00
## 597               37    100.00
## 598               39    100.00
## 599               76    100.00
## 600               37    100.00
## 601               38     82.39
## 602               43     72.38
## 603               48     79.31
## 604               26     82.39
## 605               38     88.55
## 606               20     63.14
## 607               22     73.92
## 608               45     90.86
## 609               45     85.47
## 610               20     66.99
## 611               47     64.68
## 612               46     73.92
## 613               23     83.93
## 614               33     74.69
## 615               29     90.86
## 616               44     82.39
## 617               41     92.40
## 618               20     91.63
## 619               37     78.54
## 620               29    100.00
## 621               55     65.45
## 622               22    100.00
## 623               31     67.76
## 624               49     79.22
## 625               61     73.92
## 626               39     83.93
## 627               38    100.00
## 628               31    100.00
## 629               36    100.00
## 630               25    100.00
## 631               48    100.00
## 632               35    100.00
## 633               21    100.00
## 634               47    100.00
## 635               38    100.00
## 636               41    100.00
## 637               24    100.00
## 638               37    100.00
## 639               33    100.00
## 640               49    100.00
## 641               29    100.00
## 642               24    100.00
## 643               47    100.00
## 644               24    100.00
## 645               25    100.00
## 646               30     32.47
## 647               22    100.00
## 648               27     64.69
## 649               34    100.00
## 650               36    100.00
## 651               34     43.05
## 652               48    100.00
## 653               34    100.00
## 654               24    100.00
## 655               46    100.00
## 656               45    100.00
## 657               39    100.00
## 658               43    100.00
## 659               29    100.00
## 660               20    100.00
## 661               46    100.00
## 662               27    100.00
## 663               44    100.00
## 664               43    100.00
## 665               49    100.00
## 666               40    100.00
## 667               30    100.00
## 668               50    100.00
## 669               23    100.00
## 670               26    100.00
## 671               27    100.00
## 672               42    100.00
## 673               47    100.00
## 674               49    100.00
## 675               38    100.00
## 676               20    100.00
## 677               25    100.00
## 678               25     88.00
## 679               41    100.00
## 680               28    100.00
## 681               50     67.80
## 682               32     50.25
## 683               42     53.88
## 684               24     62.36
## 685               27     69.62
## 686               26     57.51
## 687               38     61.15
## 688               42     59.33
## 689               23     71.44
## 690               21     62.96
## 691               28     50.85
## 692               33     72.65
## 693               25     62.96
## 694               28     61.75
## 695               46     49.04
## 696               30     61.15
## 697               38     84.25
## 698               40     56.91
## 699               45    100.00
## 700               27     49.30
## 701               42     72.65
## 702               36     63.57
## 703               29    100.00
## 704               39    100.00
## 705               45    100.00
## 706               47    100.00
## 707               49    100.00
## 708               46    100.00
## 709               48    100.00
## 710               46    100.00
## 711               35    100.00
## 712               43    100.00
## 713               26    100.00
## 714               22     98.18
## 715               34     99.41
## 716               50    100.00
## 717               48    100.00
## 718               41    100.00
## 719               36    100.00
## 720               29    100.00
## 721               33     37.48
## 722               46    100.00
## 723               38    100.00
## 724               20     36.42
## 725               22    100.00
## 726               27    100.00
## 727               56     98.18
## 728               38     99.41
## 729               25    100.00
## 730               33    100.00
## 731               42    100.00
## 732               33    100.00
## 733               38    100.00
## 734               31    100.00
## 735               20    100.00
## 736               44    100.00
## 737               26    100.00
## 738               27    100.00
## 739               46    100.00
## 740               47    100.00
## 741               37    100.00
## 742               31    100.00
## 743               24    100.00
## 744               31    100.00
## 745               50    100.00
## 746               35     64.69
## 747               30    100.00
## 748               29    100.00
## 749               27    100.00
## 750               40    100.00
## 751               31     98.99
## 752                6    100.00
## 753               45    100.00
## 754               22     54.09
## 755               45     68.67
## 756               43     65.02
## 757               46     61.99
## 758               39     69.28
## 759               31     71.10
## 760               41     69.28
## 761               44     60.16
## 762               45     70.49
## 763               37     69.89
## 764               35     61.38
## 765               28     59.55
## 766               30     61.99
## 767               30     49.22
## 768               25     69.28
## 769               29     57.73
## 770               26     57.73
## 771               41     53.48
## 772               34     52.87
## 773               35     61.21
## 774               34     61.38
## 775               50    100.00
## 776               41     61.99
## 777               22     96.86
## 778               35     48.62
## 779               44     38.50
## 780               47     61.99
## 781               19     49.22
## 782               34     90.39
## 783               29     71.81
## 784               49     69.27
## 785               30     85.32
## 786               21     70.96
## 787               50     76.88
## 788               47    100.00
## 789               24     76.03
## 790               27     98.84
## 791               33     86.17
## 792               35     90.39
## 793               31     71.81
## 794               25     82.79
## 795               27     82.79
## 796               31    100.00
## 797               45    100.00
## 798               27    100.00
## 799               27    100.00
## 800               42     69.27
## 801               21     74.77
## 802               34     76.88
## 803               42     76.03
## 804               15     98.84
## 805               29     70.87
## 806               46     58.15
## 807               30     61.78
## 808               30     49.67
## 809               42     51.48
## 810               46     61.18
## 811               25     64.20
## 812               32     65.42
## 813               30     64.81
## 814               40     49.67
## 815               28     60.57
## 816               23     55.72
## 817               29     61.18
## 818               34     58.75
## 819               37     63.60
## 820               20     49.06
## 821               32     48.46
## 822               34     52.09
## 823               42     52.70
## 824               38    100.00
## 825               30     62.16
## 826               23     49.67
## 827               22     53.30
## 828               39    100.00
## 829               55     55.72
## 830               36     61.18
## 831               26    100.00
## 832               31    100.00
## 833               34    100.00
## 834               41    100.00
## 835               23    100.00
## 836               48    100.00
## 837               22    100.00
## 838               21    100.00
## 839               22    100.00
## 840               40    100.00
## 841               50    100.00
## 842               29    100.00
## 843               43    100.00
## 844               24    100.00
## 845               22    100.00
## 846               43    100.00
## 847               20    100.00
## 848               25    100.00
## 849               36    100.00
## 850               24     52.67
## 851               21    100.00
## 852               30    100.00
## 853               32     94.79
## 854               21     47.18
## 855               26     78.11
## 856               35    100.00
## 857               26    100.00
## 858               46    100.00
## 859               37    100.00
## 860               27    100.00
## 861               23    100.00
## 862               39    100.00
## 863               27    100.00
## 864               38    100.00
## 865               27    100.00
## 866               40    100.00
## 867               24    100.00
## 868               44    100.00
## 869               37    100.00
## 870               20    100.00
## 871               39    100.00
## 872               44    100.00
## 873               22    100.00
## 874               43    100.00
## 875               27    100.00
## 876               26     64.90
## 877               25     52.32
## 878               49    100.00
## 879               29    100.00
## 880               41    100.00
## 881               55    100.00
## 882               27     83.07
## 883               23    100.00
## 884               31     90.17
## 885               46    100.00
## 886               47     91.18
## 887               31    100.00
## 888               46    100.00
## 889               37     89.15
## 890               28     93.21
## 891               37     90.17
## 892               49    100.00
## 893               24    100.00
## 894               30    100.00
## 895               50     88.14
## 896               31     96.24
## 897               46    100.00
## 898               47    100.00
## 899               46    100.00
## 900               37    100.00
## 901               33    100.00
## 902               31     90.17
## 903               48    100.00
## 904               41     87.13
## 905               42    100.00
## 906               41    100.00
## 907               32     45.25
## 908               10     88.14
## 909               35     57.46
## 910               28     64.33
## 911               46     73.70
## 912               20     71.20
## 913               30     49.97
## 914               48     69.96
## 915               28     53.72
## 916               39     68.08
## 917               24     51.84
## 918               28     67.46
## 919               31     58.71
## 920               45     63.71
## 921               24     58.09
## 922               49     53.72
## 923               32     63.08
## 924               43     68.71
## 925               37     50.59
## 926               24     64.96
## 927               35     53.72
## 928               41     29.87
## 929               26    100.00
## 930               34     64.96
## 931               49     70.58
## 932               28     44.21
## 933               40     68.08
## 934               37     59.96
## 935               31     53.72
## 936               41     83.44
## 937               21     89.46
## 938               40     96.34
## 939               46     74.84
## 940               44     79.14
## 941               46     73.12
## 942               41     81.72
## 943               32     89.46
## 944               46     87.74
## 945               28    100.00
## 946               49     94.62
## 947               21     73.98
## 948               32     84.30
## 949               34     98.06
## 950               21     98.06
## 951               21     96.34
## 952               31     83.44
## 953               21     94.62
## 954               25     45.86
## 955               28     82.58
## 956               43     64.97
## 957               22     86.74
## 958               37     93.01
## 959               28     72.26
## 960               30     74.84
## 961               44     73.98
## 962               25    100.00
## 963               43    100.00
## 964               30     97.39
## 965               20     90.06
## 966               26    100.00
## 967               40    100.00
## 968               31     89.01
## 969               22    100.00
## 970               23    100.00
## 971               30    100.00
## 972               49    100.00
## 973               31    100.00
## 974               29    100.00
## 975               37     84.82
## 976               38    100.00
## 977               29    100.00
## 978               23    100.00
## 979               26     85.87
## 980               38    100.00
## 981               48     47.04
## 982               40     39.80
## 983               45    100.00
## 984               44    100.00
## 985               21     94.22
## 986               35    100.00
## 987               29     86.92
## 988               21     84.82
## 989               22    100.00
## 990               26    100.00
## 991               41    100.00
## 992               47    100.00
## 993               31    100.00
## 994               43    100.00
## 995               23    100.00
## 996               28    100.00
## 997               49    100.00
## 998               24    100.00
## 999               33    100.00
## 1000              22    100.00
## 1001              32    100.00
## 1002              40    100.00
## 1003              43    100.00
## 1004              24    100.00
## 1005              32    100.00
## 1006              20    100.00
## 1007              24     69.12
## 1008              48    100.00
## 1009              44    100.00
## 1010              28    100.00
## 1011              24     61.52
## 1012              33    100.00
## 1013              41    100.00
## 1014              23    100.00
## 1015              46    100.00
## 1016              48    100.00
## 1017              25    100.00
## 1018              22    100.00
## 1019              41    100.00
## 1020              34    100.00
## 1021              32    100.00
## 1022              21    100.00
## 1023              20    100.00
## 1024              47    100.00
## 1025              39    100.00
## 1026              29    100.00
## 1027              45    100.00
## 1028              28    100.00
## 1029              26    100.00
## 1030              50    100.00
## 1031              48    100.00
## 1032              25    100.00
## 1033              40    100.00
## 1034              43    100.00
## 1035              22    100.00
## 1036              47    100.00
## 1037              36    100.00
## 1038              40    100.00
## 1039              27    100.00
## 1040              29    100.00
## 1041              20    100.00
## 1042              42    100.00
## 1043              25    100.00
## 1044              36    100.00
## 1045              21    100.00
## 1046              23    100.00
## 1047              37    100.00
## 1048              48    100.00
## 1049              25    100.00
## 1050              33    100.00
## 1051              27    100.00
## 1052              27    100.00
## 1053              20    100.00
## 1054              30    100.00
## 1055              48    100.00
## 1056              32     93.49
## 1057              34    100.00
## 1058              27     56.85
## 1059              39    100.00
## 1060              47    100.00
## 1061              22    100.00
## 1062              55    100.00
## 1063              60    100.00
## 1064              35    100.00
## 1065              28    100.00
## 1066              38    100.00
## 1067              21     95.80
## 1068              41    100.00
## 1069              22     97.81
## 1070              29     88.74
## 1071              50    100.00
## 1072              29    100.00
## 1073              49     80.67
## 1074              35    100.00
## 1075              48    100.00
## 1076              23     80.67
## 1077              48     95.80
## 1078              42    100.00
## 1079              47    100.00
## 1080              36    100.00
## 1081              22    100.00
## 1082              40     91.76
## 1083              23    100.00
## 1084              32    100.00
## 1085              21    100.00
## 1086              41     93.04
## 1087              25     84.71
## 1088              26    100.00
## 1089              24     89.75
## 1090              48    100.00
## 1091              26     68.35
## 1092              21     73.17
## 1093              45     78.00
## 1094              36     86.04
## 1095              21     81.21
## 1096              32     70.76
## 1097              30     82.82
## 1098              36     94.88
## 1099              33     86.04
## 1100              35     78.00
## 1101              37     95.69
## 1102              41     73.17
## 1103              20     76.39
## 1104              45     86.84
## 1105              38     69.96
## 1106              43     70.76
## 1107              49     78.80
## 1108              27     80.41
## 1109              46     73.98
## 1110              38     59.10
## 1111              25     66.74
## 1112              46     60.30
## 1113              22    100.00
## 1114              40    100.00
## 1115              46    100.00
## 1116              39    100.00
## 1117              38     82.34
## 1118              30    100.00
## 1119              42     94.25
## 1120              43    100.00
## 1121              29     95.24
## 1122              33     86.31
## 1123              32     79.37
## 1124              28     87.30
## 1125              41    100.00
## 1126              33    100.00
## 1127              36     84.33
## 1128              26     89.29
## 1129              34    100.00
## 1130              26     96.23
## 1131              38    100.00
## 1132              33    100.00
## 1133              33     91.27
## 1134              46    100.00
## 1135              26    100.00
## 1136              25    100.00
## 1137              45     73.08
## 1138              50    100.00
## 1139              36    100.00
## 1140              21     89.29
## 1141              29    100.00
## 1142              21    100.00
## 1143              42    100.00
## 1144              37    100.00
## 1145              25    100.00
## 1146              36    100.00
## 1147              22    100.00
## 1148              23    100.00
## 1149              32    100.00
## 1150              28    100.00
## 1151              27    100.00
## 1152              49    100.00
## 1153              41    100.00
## 1154              49    100.00
## 1155              30    100.00
## 1156              40    100.00
## 1157              23    100.00
## 1158              49    100.00
## 1159              25    100.00
## 1160              37    100.00
## 1161              55    100.00
## 1162              23    100.00
## 1163              24    100.00
## 1164              43     96.49
## 1165              50    100.00
## 1166              47    100.00
## 1167              34    100.00
## 1168              31    100.00
## 1169              28    100.00
## 1170              36    100.00
## 1171              48    100.00
## 1172              39    100.00
## 1173              45    100.00
## 1174              35    100.00
## 1175              45    100.00
## 1176              46    100.00
## 1177              37    100.00
## 1178              31    100.00
## 1179              33    100.00
## 1180              31    100.00
## 1181              27    100.00
## 1182              39    100.00
## 1183              32    100.00
## 1184              28    100.00
## 1185              26     67.91
## 1186              44     84.88
## 1187              46    100.00
## 1188              32     70.83
## 1189              65    100.00
## 1190              43    100.00
## 1191              43     67.77
## 1192              35     49.74
## 1193              45     50.36
## 1194              47     67.14
## 1195              21     64.66
## 1196              38     68.39
## 1197              21     50.36
## 1198              43     72.74
## 1199              46     54.09
## 1200              38     58.44
## 1201              26     52.22
## 1202              31     52.84
## 1203              48     54.71
## 1204              33     50.36
## 1205              38     57.20
## 1206              39     55.95
## 1207              42     67.14
## 1208              44     59.06
## 1209              29     69.63
## 1210              26     55.95
## 1211              31     53.47
## 1212              32     89.12
## 1213              28    100.00
## 1214              36    100.00
## 1215              36     52.22
## 1216              41    100.00
## 1217              27     99.52
## 1218              33    100.00
## 1219              34    100.00
## 1220              29    100.00
## 1221              34    100.00
## 1222              48    100.00
## 1223              46    100.00
## 1224              22    100.00
## 1225              20    100.00
## 1226              45     85.75
## 1227              46    100.00
## 1228              34    100.00
## 1229              50     85.75
## 1230              46    100.00
## 1231              22     84.70
## 1232              48     86.81
## 1233              47     86.81
## 1234              34    100.00
## 1235              45    100.00
## 1236              20    100.00
## 1237              50     60.49
## 1238              22     57.55
## 1239              45    100.00
## 1240              58    100.00
## 1241              51    100.00
## 1242              38    100.00
## 1243              22    100.00
## 1244              25    100.00
## 1245              24    100.00
## 1246              35    100.00
## 1247              28    100.00
## 1248              36    100.00
## 1249              39    100.00
## 1250              27    100.00
## 1251              40    100.00
## 1252              50    100.00
## 1253              42    100.00
## 1254              48    100.00
## 1255              25    100.00
## 1256              31    100.00
## 1257              44    100.00
## 1258              23    100.00
## 1259              29    100.00
## 1260              49    100.00
## 1261              36    100.00
## 1262              34    100.00
## 1263              25    100.00
## 1264              48    100.00
## 1265              38    100.00
## 1266              37    100.00
## 1267              49    100.00
## 1268              22     86.51
## 1269              28     89.27
## 1270              36     85.59
## 1271              34    100.00
## 1272              39    100.00
## 1273              21     75.46
## 1274              36    100.00
## 1275              24     97.55
## 1276              29     85.59
## 1277              38     94.79
## 1278              34    100.00
## 1279              42     90.19
## 1280              35    100.00
## 1281              35     80.99
## 1282              38     89.27
## 1283              41     81.91
## 1284              50    100.00
## 1285              21    100.00
## 1286              43     62.72
## 1287              32    100.00
## 1288               6     90.19
## 1289              66     92.95
## 1290              41     82.50
## 1291              23     97.42
## 1292              43     92.16
## 1293              24     70.22
## 1294              22     83.38
## 1295              26     73.73
## 1296              35     74.60
## 1297              47     77.24
## 1298              50    100.00
## 1299              45     87.77
## 1300              39     89.53
## 1301              23     89.53
## 1302              42     75.48
## 1303              20     89.53
## 1304              33     71.09
## 1305              34    100.00
## 1306              49    100.00
## 1307              39     90.40
## 1308              36    100.00
## 1309              50     86.01
## 1310              29    100.00
## 1311              30    100.00
## 1312              41     86.89
## 1313              28     58.58
## 1314              45    100.00
## 1315              16     75.48
## 1316              36    100.00
## 1317              41    100.00
## 1318              50    100.00
## 1319              40    100.00
## 1320              49    100.00
## 1321              45    100.00
## 1322              47    100.00
## 1323              21    100.00
## 1324              32    100.00
## 1325              47    100.00
## 1326              38    100.00
## 1327              41    100.00
## 1328              21    100.00
## 1329              41    100.00
## 1330              38    100.00
## 1331              25     99.29
## 1332              48    100.00
## 1333              22     99.29
## 1334              28    100.00
## 1335              47    100.00
## 1336              49    100.00
## 1337              45    100.00
## 1338              28    100.00
## 1339              29     57.53
## 1340              39    100.00
## 1341              46    100.00
## 1342              38    100.00
## 1343              41     47.29
## 1344              50     49.81
## 1345              43     53.83
## 1346              29     43.27
## 1347              30     42.76
## 1348              25     53.83
## 1349              49     44.78
## 1350              40     49.30
## 1351              41     44.78
## 1352              21     53.33
## 1353              46     45.28
## 1354              39     40.25
## 1355              45     59.87
## 1356              21     59.87
## 1357              44     58.36
## 1358              44     59.87
## 1359              29     51.82
## 1360              34     49.30
## 1361              39     56.85
## 1362              38    100.00
## 1363              24     79.86
## 1364              29    100.00
## 1365              30    100.00
## 1366              20    100.00
## 1367              39    100.00
## 1368              35     59.87
## 1369              26     59.87
## 1370              44    100.00
## 1371              28    100.00
## 1372              31    100.00
## 1373              29    100.00
## 1374              32    100.00
## 1375              33    100.00
## 1376              44    100.00
## 1377              32    100.00
## 1378              41    100.00
## 1379              35    100.00
## 1380              44    100.00
## 1381              26    100.00
## 1382              20    100.00
## 1383              48    100.00
## 1384              34    100.00
## 1385              49    100.00
## 1386              40    100.00
## 1387              45    100.00
## 1388              50    100.00
## 1389              38    100.00
## 1390              25    100.00
## 1391              28     58.18
## 1392              49     67.14
## 1393              49    100.00
## 1394              42     61.29
## 1395              23     57.73
## 1396              29     81.25
## 1397              25     80.54
## 1398              39     71.98
## 1399              44     69.84
## 1400              25     76.26
## 1401              45     76.26
## 1402              25     83.39
## 1403              37     57.73
## 1404              30     66.99
## 1405              36     75.55
## 1406              26     60.58
## 1407              23     73.41
## 1408              23     72.70
## 1409              25     66.99
## 1410              21    100.00
## 1411              26     63.43
## 1412              44     85.25
## 1413              24    100.00
## 1414              66     66.99
## 1415              36     57.73
## 1416              36     85.25
## 1417              22     77.90
## 1418              25     60.26
## 1419              37     72.76
## 1420              32     75.69
## 1421              47     74.22
## 1422              37     69.82
## 1423              20     62.47
## 1424              41     82.31
## 1425              21     60.26
## 1426              22     76.43
## 1427              40     80.10
## 1428              32     74.96
## 1429              36     66.14
## 1430              27     72.02
## 1431              26     87.45
## 1432              30     70.55
## 1433              23     56.84
## 1434              29     59.53
## 1435              21     60.37
## 1436              34    100.00
## 1437              26     76.43
## 1438              60     64.67
## 1439              35     55.49
## 1440              47     69.36
## 1441              20     60.69
## 1442              20     54.33
## 1443              25     65.31
## 1444              25     69.36
## 1445              27     68.78
## 1446              31     60.11
## 1447              44     66.47
## 1448              49     46.82
## 1449              26     56.07
## 1450              36     54.33
## 1451              44     52.60
## 1452              28     46.82
## 1453              45     64.74
## 1454              29     46.82
## 1455              40     53.75
## 1456              45     61.85
## 1457              44     53.18
## 1458              25     69.16
## 1459              45    100.00
## 1460              48     47.40
## 1461              44     60.76
## 1462              25     97.27
## 1463              22     91.76
## 1464              31     50.29
## 1465              21     52.60
## 1466              55     46.82
## 1467              25    100.00
## 1468              35     98.05
## 1469              35     93.54
## 1470              43     95.80
## 1471              44    100.00
## 1472              50    100.00
## 1473              48    100.00
## 1474              25    100.00
## 1475              39    100.00
## 1476              25     90.16
## 1477              32     91.29
## 1478              20    100.00
## 1479              26    100.00
## 1480              42    100.00
## 1481              21    100.00
## 1482              34    100.00
## 1483              47    100.00
## 1484              21    100.00
## 1485              48    100.00
## 1486              30     87.78
## 1487              27     84.39
## 1488              50     96.92
## 1489              38    100.00
## 1490              45    100.00
## 1491              46    100.00
## 1492              35    100.00
## 1493              29     59.37
## 1494              50     59.87
## 1495              26     49.81
## 1496              47     56.85
## 1497              23     53.33
## 1498              34     42.76
## 1499              34     53.83
## 1500              47     53.83
## 1501              45     49.81
## 1502              45     53.33
## 1503              36     43.27
## 1504              21     40.25
## 1505              28     48.30
## 1506              35     45.28
## 1507              50     52.32
## 1508              22     51.32
## 1509              45     49.30
## 1510              48     42.26
## 1511              20     87.96
## 1512              27     36.21
## 1513              38     38.50
## 1514              32    100.00
## 1515              64     40.25
## 1516              37     60.37
## 1517              28     88.63
## 1518              39    100.00
## 1519              41     94.10
## 1520              40     87.54
## 1521              49    100.00
## 1522              27     98.48
## 1523              34    100.00
## 1524              23     96.29
## 1525              31     88.63
## 1526              34     97.38
## 1527              25     95.20
## 1528              22    100.00
## 1529              32    100.00
## 1530              31    100.00
## 1531              25    100.00
## 1532              47     87.54
## 1533              21     50.65
## 1534              28     71.73
## 1535              46     94.10
## 1536              33     41.71
## 1537              43    100.00
## 1538              38     96.29
## 1539              47     88.63
## 1540              45     31.20
## 1541              20     35.51
## 1542              45     37.84
## 1543              36     33.19
## 1544              37     27.22
## 1545              31     31.53
## 1546              39     36.84
## 1547              26     29.21
## 1548              32     37.17
## 1549              20     34.19
## 1550              42     29.21
## 1551              33     29.54
## 1552              20     28.88
## 1553              29     38.17
## 1554              23     30.20
## 1555              39     29.54
## 1556              20    100.00
## 1557              45     81.91
## 1558              20     35.18
## 1559              48    100.00
## 1560              23     36.29
## 1561              32     70.56
## 1562              33    100.00
## 1563              61     29.54
## 1564              45     26.88
## 1565              38     83.03
## 1566              34     83.79
## 1567              43     83.03
## 1568              47     83.03
## 1569              22     67.03
## 1570              29     75.41
## 1571              28     68.55
## 1572              40     91.40
## 1573              25     73.88
## 1574              30     61.70
## 1575              38     69.31
## 1576              36     87.60
## 1577              32     87.60
## 1578              37     62.46
## 1579              30     79.98
## 1580              39     70.08
## 1581              32     65.51
## 1582              47     63.22
## 1583              26     86.83
## 1584              37     94.43
## 1585              55     79.98
## 1586              21    100.00
## 1587              23    100.00
## 1588              49     81.40
## 1589              59     87.60
## 1590              32     87.60
## 1591              43    100.00
## 1592              41    100.00
## 1593              45    100.00
## 1594              33    100.00
## 1595              40    100.00
## 1596              33    100.00
## 1597              50    100.00
## 1598              30    100.00
## 1599              41    100.00
## 1600              35    100.00
## 1601              49    100.00
## 1602              46    100.00
## 1603              48    100.00
## 1604              36    100.00
## 1605              22    100.00
## 1606              42    100.00
## 1607              21    100.00
## 1608              29    100.00
## 1609              35    100.00
## 1610              41    100.00
## 1611              29     71.97
## 1612              34     50.33
## 1613              37    100.00
## 1614              28     80.54
## 1615              49    100.00
## 1616              23    100.00
## 1617              46     53.76
## 1618              39     44.35
## 1619              22     45.25
## 1620              49     49.28
## 1621              43     36.29
## 1622              27     41.22
## 1623              31     36.74
## 1624              20     50.62
## 1625              24     38.08
## 1626              49     47.94
## 1627              24     48.38
## 1628              39     45.25
## 1629              37     45.70
## 1630              45     47.49
## 1631              45     48.38
## 1632              44     39.42
## 1633              23     37.63
## 1634              30    100.00
## 1635              26     85.52
## 1636              43     53.76
## 1637              26     31.86
## 1638              28     30.59
## 1639              27     68.35
## 1640              24    100.00
## 1641              40     45.70
## 1642              36    100.00
## 1643              21    100.00
## 1644              27    100.00
## 1645              47    100.00
## 1646              42    100.00
## 1647              32    100.00
## 1648              28    100.00
## 1649              24    100.00
## 1650              49    100.00
## 1651              46    100.00
## 1652              28    100.00
## 1653              48    100.00
## 1654              29    100.00
## 1655              47    100.00
## 1656              43    100.00
## 1657              25    100.00
## 1658              48    100.00
## 1659              24    100.00
## 1660              42    100.00
## 1661              31    100.00
## 1662              42    100.00
## 1663              37    100.00
## 1664              41    100.00
## 1665              20    100.00
## 1666              20    100.00
## 1667              70    100.00
## 1668              49    100.00
## 1669              35     58.87
## 1670              32     76.88
## 1671              29     61.64
## 1672              27     60.95
## 1673              27     80.34
## 1674              38     74.11
## 1675              35     72.03
## 1676              42     76.19
## 1677              21     63.72
## 1678              37     80.34
## 1679              26     79.65
## 1680              47     65.80
## 1681              37     65.10
## 1682              46     75.49
## 1683              38     59.56
## 1684              33     66.49
## 1685              24     56.10
## 1686              31     81.73
## 1687              42     81.03
## 1688              32    100.00
## 1689              41     70.65
## 1690              43     61.23
## 1691              20    100.00
## 1692              35     65.13
## 1693              27     79.65
## 1694              43     78.15
## 1695              32     72.70
## 1696              21     73.60
## 1697              20    100.00
## 1698              22     74.51
## 1699              36     73.60
## 1700              46     83.60
## 1701              47     96.32
## 1702              45     88.14
## 1703              47     88.14
## 1704              47     94.50
## 1705              38     87.24
## 1706              49     79.97
## 1707              35     80.87
## 1708              49    100.00
## 1709              28     93.60
## 1710              30     72.70
## 1711              39     86.72
## 1712              25    100.00
## 1713              40    100.00
## 1714              36     37.50
## 1715              76     94.50
## 1716              39    100.00
## 1717              44     39.60
## 1718              24     30.06
## 1719              39     38.19
## 1720              21     42.43
## 1721              30     40.31
## 1722              27     31.82
## 1723              37     31.12
## 1724              42     31.82
## 1725              32     28.29
## 1726              42     29.70
## 1727              21     40.31
## 1728              33     32.88
## 1729              49     36.07
## 1730              31     33.24
## 1731              38     41.72
## 1732              20     40.66
## 1733              39     30.06
## 1734              48     31.47
## 1735              39     37.13
## 1736              30    100.00
## 1737              33     37.13
## 1738              36     37.13
## 1739              36     82.94
## 1740              45    100.00
## 1741              40    100.00
## 1742              46     38.90
## 1743              30     36.07
## 1744              31     33.24
## 1745              49     74.68
## 1746              41     59.60
## 1747              35     67.14
## 1748              27     60.97
## 1749              23     72.62
## 1750              21     69.88
## 1751              34     80.84
## 1752              22     69.20
## 1753              48     67.82
## 1754              43     82.21
## 1755              32     81.53
## 1756              20     67.82
## 1757              24     67.14
## 1758              40     65.08
## 1759              30     73.99
## 1760              21     71.25
## 1761              25     75.36
## 1762              34     63.71
## 1763              48     58.92
## 1764              55    100.00
## 1765              25     74.68
## 1766              38     70.44
## 1767              39     55.96
## 1768              28     57.55
## 1769              24     61.66
## 1770              21     67.82
## 1771              46    100.00
## 1772              25     93.95
## 1773              34    100.00
## 1774              25    100.00
## 1775              23    100.00
## 1776              20    100.00
## 1777              23    100.00
## 1778              42    100.00
## 1779              27    100.00
## 1780              33    100.00
## 1781              28     98.65
## 1782              43    100.00
## 1783              48    100.00
## 1784              48    100.00
## 1785              45    100.00
## 1786              43    100.00
## 1787              44     42.26
## 1788              24     87.24
## 1789              31    100.00
## 1790              44     36.29
## 1791              59     98.65
## 1792              55     96.30
## 1793              29     32.10
## 1794              39     30.96
## 1795              20     35.87
## 1796              25     42.67
## 1797              42     37.00
## 1798              36     35.49
## 1799              37     42.67
## 1800              30     30.59
## 1801              21     37.00
## 1802              34     43.42
## 1803              42     36.63
## 1804              20     44.56
## 1805              40     42.67
## 1806              34     40.40
## 1807              31     38.89
## 1808              36     39.65
## 1809              48     34.36
## 1810              33     41.91
## 1811              37     33.23
## 1812              27     42.24
## 1813              39     40.40
## 1814              36     38.52
## 1815              36    100.00
## 1816              41    100.00
## 1817              37    100.00
## 1818              47     44.56
## 1819              15     42.67
## 1820              44     72.58
## 1821              35     87.62
## 1822              41     94.71
## 1823              49     98.25
## 1824              31     91.17
## 1825              20     79.66
## 1826              45     72.58
## 1827              33     74.35
## 1828              47     83.20
## 1829              20     89.40
## 1830              47     70.81
## 1831              40     94.71
## 1832              30    100.00
## 1833              22     91.17
## 1834              27    100.00
## 1835              34     92.94
## 1836              46     84.97
## 1837              31     84.08
## 1838              24     86.74
## 1839              41     85.85
## 1840              55    100.00
## 1841              30    100.00
## 1842              33     57.32
## 1843              43     97.87
## 1844              27     83.20
## 1845              60    100.00
## 1846              27     73.62
## 1847              49     83.04
## 1848              31     73.62
## 1849              20     77.05
## 1850              24     81.33
## 1851              33     94.17
## 1852              32     72.77
## 1853              40     79.62
## 1854              27     79.62
## 1855              40     79.62
## 1856              26     81.33
## 1857              44     96.74
## 1858              33     71.06
## 1859              34     68.49
## 1860              48     74.48
## 1861              25     83.04
## 1862              39     84.75
## 1863              45     34.19
## 1864              24    100.00
## 1865              46     79.62
## 1866              44     79.06
## 1867              13     81.33
## 1868              35     96.74
## 1869              30     63.07
## 1870              34     50.21
## 1871              27     66.13
## 1872              30     68.58
## 1873              50     69.80
## 1874              34     50.21
## 1875              23     65.52
## 1876              48     60.01
## 1877              34     64.90
## 1878              48     48.98
## 1879              24     50.21
## 1880              47     62.45
## 1881              24     52.66
## 1882              47     62.45
## 1883              20     61.23
## 1884              20     67.97
## 1885              31     58.78
## 1886              38     56.94
## 1887              26     61.23
## 1888              25    100.00
## 1889              48     62.45
## 1890              44     62.45
## 1891              21    100.00
## 1892              46     41.54
## 1893              46     52.84
## 1894              55     52.66
## 1895              31     52.60
## 1896              20     72.98
## 1897              29     59.18
## 1898              33     77.59
## 1899              34     55.89
## 1900              32     63.12
## 1901              27     73.64
## 1902              21     69.04
## 1903              27     71.67
## 1904              36     77.59
## 1905              43     70.35
## 1906              25     69.70
## 1907              46     70.35
## 1908              24     72.33
## 1909              39     71.67
## 1910              31     53.92
## 1911              22     71.67
## 1912              47     76.93
## 1913              20     72.98
## 1914              29     99.69
## 1915              38     68.38
## 1916              34    100.00
## 1917              46     66.00
## 1918              35     63.76
## 1919              34     71.67
## 1920              38     57.20
## 1921              18     69.70
## 1922              37    100.00
## 1923              43    100.00
## 1924              27    100.00
## 1925              30    100.00
## 1926              22     98.51
## 1927              49    100.00
## 1928              46    100.00
## 1929              48     91.02
## 1930              46     87.81
## 1931              48     92.09
## 1932              27     86.73
## 1933              43    100.00
## 1934              48    100.00
## 1935              41    100.00
## 1936              22     96.37
## 1937              46     92.09
## 1938              21     89.95
## 1939              31     37.18
## 1940              26     95.88
## 1941              20     99.58
## 1942              34    100.00
## 1943              43     86.73
## 1944              26    100.00
## 1945              50     79.67
## 1946              35     90.57
## 1947              50     77.99
## 1948              23     80.51
## 1949              37     67.93
## 1950              29     83.86
## 1951              21     72.12
## 1952              36     85.54
## 1953              22     86.38
## 1954              22     89.73
## 1955              46     80.51
## 1956              23     76.31
## 1957              49     87.21
## 1958              48     83.02
## 1959              33     72.96
## 1960              22     77.15
## 1961              22     91.41
## 1962              25     92.25
## 1963              20     92.25
## 1964              42     59.36
## 1965              25     60.34
## 1966              23    100.00
## 1967              37     85.54
## 1968              37     90.57
## 1969              42     72.96
## 1970              51     76.31
## 1971              40    100.00
## 1972              43    100.00
## 1973              47    100.00
## 1974              23    100.00
## 1975              35    100.00
## 1976              34    100.00
## 1977              25    100.00
## 1978              45    100.00
## 1979              47    100.00
## 1980              49    100.00
## 1981              40    100.00
## 1982              29    100.00
## 1983              39    100.00
## 1984              24    100.00
## 1985              25    100.00
## 1986              36    100.00
## 1987              50    100.00
## 1988              45    100.00
## 1989              26    100.00
## 1990              21    100.00
## 1991              42    100.00
## 1992              32    100.00
## 1993              31     94.58
## 1994              33     53.27
## 1995              45    100.00
## 1996              76    100.00
## 1997              70    100.00
## 1998              50     64.83
## 1999              28     70.29
## 2000              50     81.89
## 2001              28     66.19
## 2002              44     77.11
## 2003              27     73.02
## 2004              30     72.33
## 2005              43     66.19
## 2006              29     69.60
## 2007              48     56.64
## 2008              33     60.05
## 2009              40     75.06
## 2010              48     61.42
## 2011              41     81.89
## 2012              21     55.96
## 2013              32     71.65
## 2014              43     76.43
## 2015              30     77.79
## 2016              35     76.43
## 2017              45     96.92
## 2018              34     59.37
## 2019              26    100.00
## 2020              39     73.00
## 2021              41     73.32
## 2022              41     68.24
## 2023              64     60.05
## 2024              18     75.06
## 2025              49     34.47
## 2026              48     34.47
## 2027              46     33.23
## 2028              26     38.98
## 2029              37     38.98
## 2030              35     33.23
## 2031              23     42.26
## 2032              22     41.03
## 2033              39     33.23
## 2034              44     34.88
## 2035              27     43.90
## 2036              46     36.93
## 2037              33     41.85
## 2038              33     40.62
## 2039              24     40.21
## 2040              31     35.29
## 2041              41     77.24
## 2042              22     97.44
## 2043              46     37.34
## 2044              43     95.03
## 2045              15     36.93
## 2046              15     43.49
## 2047              26    100.00
## 2048              44    100.00
## 2049              20     96.99
## 2050              40     94.62
## 2051              23    100.00
## 2052              24     99.36
## 2053              29    100.00
## 2054              49    100.00
## 2055              34    100.00
## 2056              28    100.00
## 2057              37    100.00
## 2058              45    100.00
## 2059              46    100.00
## 2060              22    100.00
## 2061              39    100.00
## 2062              27    100.00
## 2063              36    100.00
## 2064              38    100.00
## 2065              44    100.00
## 2066              31    100.00
## 2067              23    100.00
## 2068              22    100.00
## 2069              28     50.32
## 2070              21     93.91
## 2071              37    100.00
## 2072              31    100.00
## 2073              25    100.00
## 2074              26     86.68
## 2075              34    100.00
## 2076              29    100.00
## 2077              20     90.57
## 2078              42     91.55
## 2079              22    100.00
## 2080              47    100.00
## 2081              20    100.00
## 2082              33     97.39
## 2083              39     90.57
## 2084              33    100.00
## 2085              40     86.68
## 2086              46     78.89
## 2087              48     97.39
## 2088              21     78.89
## 2089              45    100.00
## 2090              33    100.00
## 2091              44    100.00
## 2092              33    100.00
## 2093              39    100.00
## 2094              39     50.31
## 2095              41    100.00
## 2096              40     86.92
## 2097              33    100.00
## 2098              28     78.89
## 2099              26     63.76
## 2100              29     85.49
## 2101              46     77.52
## 2102              33     84.77
## 2103              48     78.25
## 2104              40     71.00
## 2105              23     74.62
## 2106              40     81.14
## 2107              37     74.62
## 2108              24     75.35
## 2109              27     62.31
## 2110              21     71.00
## 2111              23     72.45
## 2112              44     83.32
## 2113              35     83.32
## 2114              43     60.86
## 2115              40     84.77
## 2116              35     89.90
## 2117              25     62.46
## 2118              43    100.00
## 2119              50     63.34
## 2120              45     78.25
## 2121              52     81.14
## 2122              48     74.62
## 2123              31     68.71
## 2124              29     71.14
## 2125              23     87.31
## 2126              31     64.67
## 2127              23     67.10
## 2128              24     94.58
## 2129              28     71.14
## 2130              44     66.29
## 2131              22     92.16
## 2132              46     70.33
## 2133              22     93.77
## 2134              38     87.31
## 2135              47     83.27
## 2136              48     75.18
## 2137              40     88.12
## 2138              32     80.84
## 2139              49     97.01
## 2140              43     85.69
## 2141              41    100.00
## 2142              30    100.00
## 2143              28     95.39
## 2144              43    100.00
## 2145              41    100.00
## 2146              30     82.42
## 2147              31    100.00
## 2148              32    100.00
## 2149              43     96.31
## 2150              26    100.00
## 2151              27    100.00
## 2152              24    100.00
## 2153              22    100.00
## 2154              46    100.00
## 2155              37     97.27
## 2156              49     80.90
## 2157              21    100.00
## 2158              25    100.00
## 2159              37    100.00
## 2160              45     86.68
## 2161              32     85.72
## 2162              29     82.83
## 2163              26     83.79
## 2164              28    100.00
## 2165              27     87.64
## 2166              20     98.18
## 2167              44    100.00
## 2168              42    100.00
## 2169              41    100.00
## 2170              26    100.00
## 2171              26    100.00
## 2172              26    100.00
## 2173              41     86.68
## 2174              20     92.90
## 2175              22    100.00
## 2176              23    100.00
## 2177              33     93.90
## 2178              28    100.00
## 2179              44     98.89
## 2180              46     79.91
## 2181              21    100.00
## 2182              41    100.00
## 2183              31    100.00
## 2184              31     79.91
## 2185              23     81.91
## 2186              37     98.89
## 2187              26    100.00
## 2188              24     79.91
## 2189              47    100.00
## 2190              45     63.91
## 2191              55    100.00
## 2192              46     81.17
## 2193              50    100.00
## 2194              37    100.00
## 2195              44     94.90
## 2196              49    100.00
## 2197              45    100.00
## 2198              27     43.45
## 2199              31     44.66
## 2200              33     40.23
## 2201              31     35.80
## 2202              35     35.40
## 2203              26     39.83
## 2204              34     45.46
## 2205              46     32.99
## 2206              41     42.24
## 2207              43     39.43
## 2208              26     40.23
## 2209              36     48.28
## 2210              20     32.59
## 2211              27     36.61
## 2212              37     41.03
## 2213              24     42.24
## 2214              36     43.05
## 2215              29     38.22
## 2216              28    100.00
## 2217              29    100.00
## 2218              38     39.83
## 2219              48     48.28
## 2220              40     82.46
## 2221              41     44.56
## 2222              30     40.23
## 2223              35     47.62
## 2224              28     55.73
## 2225              45     51.95
## 2226              24     45.99
## 2227              41     63.85
## 2228              48     45.99
## 2229              50     63.31
## 2230              33     62.77
## 2231              32     43.29
## 2232              27     60.06
## 2233              35     55.19
## 2234              23     54.11
## 2235              35     48.70
## 2236              40     43.83
## 2237              35     47.62
## 2238              31     55.19
## 2239              50     46.53
## 2240              40     57.90
## 2241              38     45.45
## 2242              38    100.00
## 2243              40     60.60
## 2244              33     46.53
## 2245              36    100.00
## 2246              20     66.47
## 2247              32     53.18
## 2248              36     62.77
## 2249              19     48.70
## 2250              11     43.83
## 2251              49     65.87
## 2252              27     63.38
## 2253              29     70.84
## 2254              42     74.57
## 2255              33     50.95
## 2256              44     53.44
## 2257              22     64.00
## 2258              48     50.95
## 2259              33     54.68
## 2260              45     56.55
## 2261              20     52.82
## 2262              46     60.90
## 2263              40     49.71
## 2264              45     64.63
## 2265              36     59.65
## 2266              31     67.73
## 2267              46     50.33
## 2268              35     66.49
## 2269              28    100.00
## 2270              31     84.71
## 2271              27    100.00
## 2272              22    100.00
## 2273              30     99.55
## 2274              44     36.07
## 2275              30     60.28
## 2276              24     49.71
## 2277              45     75.63
## 2278              23     68.52
## 2279              26     62.70
## 2280              28     60.76
## 2281              49     58.18
## 2282              49     54.94
## 2283              29     74.98
## 2284              49     64.64
## 2285              39     54.94
## 2286              36     58.82
## 2287              39     62.05
## 2288              30     73.04
## 2289              44     69.16
## 2290              20     61.41
## 2291              21     63.35
## 2292              36     77.57
## 2293              32     71.75
## 2294              36     73.04
## 2295              34     56.24
## 2296              48    100.00
## 2297              33     73.69
## 2298              31    100.00
## 2299              36    100.00
## 2300              25    100.00
## 2301              48    100.00
## 2302              27     69.16
## 2303              44     61.41
## 2304              33     72.92
## 2305              29     72.23
## 2306              49     57.10
## 2307              20     81.86
## 2308              31     73.61
## 2309              39     59.16
## 2310              20     66.04
## 2311              34     77.73
## 2312              50     61.22
## 2313              40     79.11
## 2314              28     63.97
## 2315              50     81.86
## 2316              28     79.80
## 2317              46     66.04
## 2318              24     59.16
## 2319              24     81.17
## 2320              39     59.16
## 2321              40     44.51
## 2322              49     72.33
## 2323              44     82.26
## 2324              35    100.00
## 2325              22     67.41
## 2326              62     77.73
## 2327              26     61.22
## 2328              31    100.00
## 2329              25     86.74
## 2330              30     89.80
## 2331              27    100.00
## 2332              23    100.00
## 2333              34    100.00
## 2334              22    100.00
## 2335              42     85.72
## 2336              37    100.00
## 2337              30    100.00
## 2338              27    100.00
## 2339              25    100.00
## 2340              34     97.97
## 2341              38    100.00
## 2342              26    100.00
## 2343              38    100.00
## 2344              50     84.70
## 2345              22    100.00
## 2346              32    100.00
## 2347              31     71.02
## 2348              40    100.00
## 2349              22    100.00
## 2350              41    100.00
## 2351              45     48.98
## 2352              45    100.00
## 2353              39     40.15
## 2354              49     50.62
## 2355              27     50.19
## 2356              34     36.66
## 2357              20     41.02
## 2358              48     51.93
## 2359              29     38.40
## 2360              43     41.02
## 2361              41     46.26
## 2362              41     35.35
## 2363              36     51.93
## 2364              49     37.97
## 2365              38     45.39
## 2366              33     51.93
## 2367              26     48.44
## 2368              47     43.64
## 2369              34     47.57
## 2370              34     51.93
## 2371              40     50.62
## 2372              40     82.21
## 2373              33     82.59
## 2374              49     65.80
## 2375              27    100.00
## 2376              49     36.66
## 2377              56     35.35
## 2378              37     51.93
## 2379              33    100.00
## 2380              27    100.00
## 2381              46    100.00
## 2382              44    100.00
## 2383              26    100.00
## 2384              48     94.92
## 2385              23    100.00
## 2386              45    100.00
## 2387              49    100.00
## 2388              28     94.92
## 2389              37    100.00
## 2390              34    100.00
## 2391              22    100.00
## 2392              29    100.00
## 2393              34     98.39
## 2394              38    100.00
## 2395              41    100.00
## 2396              42    100.00
## 2397              28    100.00
## 2398              38    100.00
## 2399              23    100.00
## 2400              31     71.40
## 2401              46    100.00
## 2402              48     56.55
## 2403              29    100.00
## 2404              46    100.00
## 2405              26    100.00
## 2406              18    100.00
## 2407              32     53.31
## 2408              21     49.21
## 2409              46     69.12
## 2410              42     49.79
## 2411              31     57.41
## 2412              38     66.78
## 2413              38     64.44
## 2414              20     48.62
## 2415              46     62.09
## 2416              30     65.61
## 2417              30     68.54
## 2418              43     52.14
## 2419              49     63.85
## 2420              43     56.82
## 2421              37     66.78
## 2422              35     55.07
## 2423              34     60.34
## 2424              38     61.51
## 2425              44    100.00
## 2426              21    100.00
## 2427              44    100.00
## 2428              25     64.93
## 2429              24     58.58
## 2430              38     60.06
## 2431              45    100.00
## 2432              51     63.85
## 2433              34     82.99
## 2434              44     74.85
## 2435              44     96.00
## 2436              38     81.36
## 2437              31     71.60
## 2438              48     80.55
## 2439              21     93.56
## 2440              40     66.72
## 2441              40     80.55
## 2442              50     77.29
## 2443              20     68.34
## 2444              48     72.41
## 2445              47     89.50
## 2446              21     70.78
## 2447              39     78.92
## 2448              44     80.55
## 2449              28     88.68
## 2450              45     77.29
## 2451              20    100.00
## 2452              38    100.00
## 2453              26    100.00
## 2454              44    100.00
## 2455              49    100.00
## 2456              22    100.00
## 2457              31     68.34
## 2458              41     70.67
## 2459              25     76.67
## 2460              31     60.00
## 2461              41     64.00
## 2462              43     64.67
## 2463              43     75.34
## 2464              24     76.00
## 2465              21     54.00
## 2466              23     64.67
## 2467              38     74.67
## 2468              31     62.67
## 2469              36     70.67
## 2470              36     71.34
## 2471              34     62.00
## 2472              21     65.34
## 2473              45     78.67
## 2474              26     75.34
## 2475              50     54.00
## 2476              41     62.00
## 2477              39     60.00
## 2478              22    100.00
## 2479              46     76.67
## 2480              44    100.00
## 2481              25     77.34
## 2482              39     66.67
## 2483              37     71.34
## 2484              31    100.00
## 2485              47     82.21
## 2486              24     77.64
## 2487              36    100.00
## 2488              48    100.00
## 2489              28     98.65
## 2490              48     83.12
## 2491              21     78.55
## 2492              25    100.00
## 2493              25    100.00
## 2494              31     91.34
## 2495              40     84.03
## 2496              32     89.51
## 2497              24     83.12
## 2498              42    100.00
## 2499              21    100.00
## 2500              34     82.21
## 2501              27    100.00
## 2502              30     88.60
## 2503              39    100.00
## 2504              20     60.54
## 2505              37     81.87
## 2506              46    100.00
## 2507              47     87.69
## 2508              11    100.00
## 2509              23     91.34
## 2510              29     70.15
## 2511              38     79.68
## 2512              32     97.00
## 2513              43     84.01
## 2514              31     87.48
## 2515              29    100.00
## 2516              31     88.34
## 2517              30     94.40
## 2518              50     94.40
## 2519              40     80.55
## 2520              23     97.00
## 2521              26     88.34
## 2522              40    100.00
## 2523              21    100.00
## 2524              43     86.61
## 2525              29     71.89
## 2526              38     91.81
## 2527              23     76.22
## 2528              20    100.00
## 2529              36     70.30
## 2530              28    100.00
## 2531              44    100.00
## 2532              49    100.00
## 2533              32     80.55
## 2534              34    100.00
## 2535              30    100.00
## 2536              29     94.14
## 2537              22     85.99
## 2538              26    100.00
## 2539              32     91.43
## 2540              29    100.00
## 2541              34     96.86
## 2542              24     99.57
## 2543              24     90.52
## 2544              33     88.71
## 2545              26    100.00
## 2546              40     95.95
## 2547              44     94.14
## 2548              24     90.52
## 2549              20     94.14
## 2550              34    100.00
## 2551              34     97.76
## 2552              45     93.24
## 2553              41    100.00
## 2554              55     71.25
## 2555              23    100.00
## 2556              24     45.39
## 2557              32     84.41
## 2558              29     85.76
## 2559              36    100.00
## 2560              46     87.80
## 2561              32     95.95
## 2562              34    100.00
## 2563              24    100.00
## 2564              40    100.00
## 2565              26     82.77
## 2566              20    100.00
## 2567              31    100.00
## 2568              22     87.75
## 2569              42    100.00
## 2570              26     99.72
## 2571              37     87.75
## 2572              38     88.75
## 2573              35    100.00
## 2574              33     90.75
## 2575              39    100.00
## 2576              45    100.00
## 2577              24    100.00
## 2578              35     88.75
## 2579              23    100.00
## 2580              37    100.00
## 2581              55     87.75
## 2582              49    100.00
## 2583              26    100.00
## 2584              33    100.00
## 2585              37     83.84
## 2586              22     86.76
## 2587              85     88.75
## 2588              22    100.00
## 2589              31     65.77
## 2590              38     65.77
## 2591              45     85.29
## 2592              31     85.29
## 2593              36     64.33
## 2594              46     70.11
## 2595              32     76.62
## 2596              39     57.82
## 2597              50     78.79
## 2598              46     74.45
## 2599              36     80.95
## 2600              29     82.40
## 2601              32     75.89
## 2602              44     68.67
## 2603              42     62.16
## 2604              47     65.77
## 2605              44     58.55
## 2606              43     75.17
## 2607              48     74.45
## 2608              21     96.31
## 2609              50     74.35
## 2610              29     75.35
## 2611              41     70.33
## 2612              37    100.00
## 2613              22     66.50
## 2614              31     75.89
## 2615              42    100.00
## 2616              42    100.00
## 2617              45    100.00
## 2618              36    100.00
## 2619              20    100.00
## 2620              39     81.93
## 2621              42     85.98
## 2622              23     86.99
## 2623              26     89.01
## 2624              33    100.00
## 2625              31     88.00
## 2626              50    100.00
## 2627              44    100.00
## 2628              45     80.92
## 2629              46     88.00
## 2630              27     85.98
## 2631              28    100.00
## 2632              40    100.00
## 2633              30     99.13
## 2634              34    100.00
## 2635              46    100.00
## 2636              32     82.83
## 2637              27    100.00
## 2638              34    100.00
## 2639              34     54.84
## 2640              34    100.00
## 2641              46     80.92
## 2642              32    100.00
## 2643              24    100.00
## 2644              27     99.67
## 2645              20    100.00
## 2646              36    100.00
## 2647              29    100.00
## 2648              25    100.00
## 2649              29    100.00
## 2650              25     96.11
## 2651              44    100.00
## 2652              47    100.00
## 2653              48    100.00
## 2654              45    100.00
## 2655              35    100.00
## 2656              31    100.00
## 2657              50    100.00
## 2658              33    100.00
## 2659              29    100.00
## 2660              48     68.80
## 2661              44     72.42
## 2662              25     66.73
## 2663              50    100.00
## 2664              23    100.00
## 2665              21     96.11
## 2666              41    100.00
## 2667              44     74.40
## 2668              43     76.00
## 2669              28     96.00
## 2670              43     86.40
## 2671              48     96.00
## 2672              38     82.40
## 2673              31     86.40
## 2674              26     67.20
## 2675              32     92.00
## 2676              44     67.20
## 2677              27     76.00
## 2678              43     73.60
## 2679              25     69.60
## 2680              22     80.80
## 2681              21     87.20
## 2682              48     75.20
## 2683              33     64.00
## 2684              34    100.00
## 2685              43     81.95
## 2686              44    100.00
## 2687              44    100.00
## 2688              32     94.34
## 2689              29     65.60
## 2690              77     92.00
## 2691              39     67.20
## 2692              39     81.14
## 2693              36    100.00
## 2694              42     91.15
## 2695              21    100.00
## 2696              50     88.15
## 2697              24    100.00
## 2698              44     92.16
## 2699              37    100.00
## 2700              27     92.16
## 2701              37    100.00
## 2702              38    100.00
## 2703              48     96.16
## 2704              30    100.00
## 2705              25     88.15
## 2706              40     86.15
## 2707              22     88.15
## 2708              34    100.00
## 2709              32     90.15
## 2710              31     86.15
## 2711              43     80.00
## 2712              31     89.38
## 2713              31     77.34
## 2714              34     96.34
## 2715              45     92.08
## 2716              48    100.00
## 2717              28    100.00
## 2718              22    100.00
## 2719              45     83.42
## 2720              30     85.41
## 2721              38     85.41
## 2722              20    100.00
## 2723              28    100.00
## 2724              24    100.00
## 2725              22     79.45
## 2726              35     93.35
## 2727              33     85.41
## 2728              31     95.34
## 2729              35     82.43
## 2730              35     90.37
## 2731              50     81.43
## 2732              26    100.00
## 2733              38     89.38
## 2734              45    100.00
## 2735              30    100.00
## 2736              37     91.37
## 2737              37     86.61
## 2738              36     71.89
## 2739              25    100.00
## 2740              37    100.00
## 2741              30     95.48
## 2742              36    100.00
## 2743              27     90.37
## 2744              48     61.44
## 2745              26     59.22
## 2746              26     85.13
## 2747              34     85.87
## 2748              44     85.87
## 2749              39     82.91
## 2750              45     76.25
## 2751              40     63.67
## 2752              42     70.33
## 2753              43     74.03
## 2754              34     72.55
## 2755              38     62.19
## 2756              35     71.07
## 2757              31     72.55
## 2758              32     64.41
## 2759              47     86.62
## 2760              39     68.11
## 2761              44     62.19
## 2762              39     85.87
## 2763              50     57.86
## 2764              22     75.51
## 2765              35    100.00
## 2766              45     55.62
## 2767              44     86.40
## 2768              36     87.36
## 2769              28     72.55
## 2770              43     62.19
## 2771              48     52.64
## 2772              28     48.17
## 2773              21     41.71
## 2774              37     50.65
## 2775              34     49.16
## 2776              40     41.71
## 2777              45     51.15
## 2778              28     52.14
## 2779              29     41.71
## 2780              48     44.69
## 2781              31     45.69
## 2782              32     57.61
## 2783              21     57.11
## 2784              32     58.60
## 2785              43     57.61
## 2786              21     45.19
## 2787              34     53.63
## 2788              34     43.70
## 2789              44     86.13
## 2790              27     76.31
## 2791              49     52.64
## 2792              23     95.20
## 2793              25     64.97
## 2794              50     87.15
## 2795              34     40.22
## 2796              20     56.12
## 2797              42     57.61
## 2798              25     56.78
## 2799              50     43.68
## 2800              32     64.97
## 2801              39     44.23
## 2802              50     60.06
## 2803              38     48.59
## 2804              40     50.23
## 2805              28     64.43
## 2806              42     50.23
## 2807              42     63.88
## 2808              36     63.34
## 2809              24     49.69
## 2810              23     65.52
## 2811              29     50.78
## 2812              37     45.86
## 2813              33     51.32
## 2814              32     60.06
## 2815              35     59.51
## 2816              40     55.69
## 2817              37     86.74
## 2818              42     97.16
## 2819              20    100.00
## 2820              29    100.00
## 2821              43    100.00
## 2822              34     62.24
## 2823              47     65.52&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;don’t forget to assign it!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select_data &amp;lt;- select(sales_data, QUANTITYORDERED, PRICEEACH)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;arrange() function
order your data&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arranged_asc_data &amp;lt;- arrange(select_data, PRICEEACH)
arranged_desc_data &amp;lt;- arrange(select_data, -PRICEEACH)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;filter() function
filter out data
first argument is the dataset, second argument is the filter conditions&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filtered_data &amp;lt;- filter(sales_data, STATE == &amp;#39;NY&amp;#39;)
filtered_data &amp;lt;- filter(sales_data, STATE == &amp;#39;NY&amp;#39; &amp;amp; PRODUCTLINE == &amp;#39;Classic Cars&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;if-i-want-to-filter-and-select-data-i-have-to-run-the-command-twice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;If I want to ‘filter’ and ‘select’ data, I have to run the command twice&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filtered_data &amp;lt;- filter(sales_data, STATE == &amp;#39;NY&amp;#39; &amp;amp; PRODUCTLINE == &amp;#39;Classic Cars&amp;#39;)

## notice the first argument is filtered_data
select_data &amp;lt;- select(filtered_data, QUANTITYORDERED, PRICEEACH)

## notice the first argument is select_data
arrange_data &amp;lt;- arrange(select_data, PRICEEACH) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s kind of tedious to have to run the command twice, so we will use a concept called piping (%&amp;gt;%)
Piping is sending the output of one function into the input of another. The output will be the first argument of the next function
The same command above can be written like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;piped_data &amp;lt;- sales_data %&amp;gt;%
  filter(STATE == &amp;#39;NY&amp;#39; &amp;amp; PRODUCTLINE == &amp;#39;Classic Cars&amp;#39;) %&amp;gt;%
  select(QUANTITYORDERED, PRICEEACH) %&amp;gt;%
  arrange(PRICEEACH)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;mutate() function
create your own columns using mutate
Same as above but using piping&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mutated_data &amp;lt;- mutate(sales_data, discounted = 0.95 * SALES)

## same as above but using piping
mutated_data &amp;lt;- sales_data %&amp;gt;%
  mutate(discounted = 0.95 * SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;YOUR TURN!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales_data &amp;lt;- read.csv(&amp;#39;sales_data_sample.csv&amp;#39;) # Reread the data in case you made any changes to it&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Q1: what is the most common deal size (column name: DEALSIZE)?
summary(sales_data$DEALSIZE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Large Medium  Small 
##    157   1384   1282&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Q2: what is the average quantity ordered? (HINT: Can also use mean function)
mean(sales_data$QUANTITYORDERED)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35.09281&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(sales_data$QUANTITYORDERED)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    6.00   27.00   35.00   35.09   43.00   97.00&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Q3: create a new dataset called q3_data with 
##       - a new column called MSRP_REV which is equal to the MSRP * QUANTITYORDERED
##       - filtered to only have &amp;#39;Large&amp;#39; sized deals 
##       - with only the selected columns ORDERNUMBER, QUANTITYORDERED, PRICEEACH, MSRP, SALES, MSRP_REV
##       - ordered in descending order by SALES
q3_data &amp;lt;- sales_data %&amp;gt;% 
  mutate(MSRP_REV = MSRP * QUANTITYORDERED) %&amp;gt;% 
  filter(DEALSIZE == &amp;#39;Large&amp;#39;) %&amp;gt;% 
  select(ORDERNUMBER, QUANTITYORDERED, PRICEEACH, MSRP, SALES, MSRP_REV) %&amp;gt;% 
  arrange(-SALES)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## 5. group_by() and summarise() function
##    group_by() and summarise() will help us solve questions such as, what are the total sales by country?
grouped_data &amp;lt;- group_by(sales_data, COUNTRY)
summarised_data &amp;lt;- summarise(grouped_data, total_sales = sum(SALES))

## same as above, But using piping
summarised_data &amp;lt;- sales_data %&amp;gt;%
  group_by(COUNTRY) %&amp;gt;%
  summarise(total_sales = sum(SALES))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Instead of sum(), can also do max(), min(), mean(), n() for count, and others

## Q4: what is the average SALE by PRODUCTLINE?
summarised_data &amp;lt;- sales_data %&amp;gt;% 
  group_by(PRODUCTLINE) %&amp;gt;% 
  summarise(average_sales = mean(SALES))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create a simple dot plot
ggplot(sales_data, aes(x = QUANTITYORDERED, y = SALES)) +
  geom_point() +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## change color
ggplot(sales_data, aes(x = QUANTITYORDERED, y = SALES)) +
  geom_point(aes(color = &amp;#39;red&amp;#39;)) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## add labels and remove legend
ggplot(sales_data, aes(x = QUANTITYORDERED, y = SALES)) +
  geom_point(aes(color = &amp;#39;red&amp;#39;)) +
  labs(title = &amp;#39;Sales and Quantity Ordered&amp;#39;,
       y = &amp;#39;Unit Price ($)&amp;#39;,
       x = &amp;#39;Quantity Ordered (Units)&amp;#39;) + 
  theme(legend.position=&amp;quot;none&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## add regression line
ggplot(sales_data, aes(x = QUANTITYORDERED, y = SALES)) +
  geom_point(aes(color = &amp;#39;red&amp;#39;)) +
  labs(title = &amp;#39;Sales and Quantity Ordered&amp;#39;,
       y = &amp;#39;Unit Price ($)&amp;#39;,
       x = &amp;#39;Quantity Ordered (Units)&amp;#39;) + 
  theme(legend.position = &amp;quot;none&amp;quot;)+
  geom_smooth(method = &amp;quot;lm&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## bar charts
## will first create a grouped by and summarised dataset
status_data &amp;lt;- sales_data %&amp;gt;%
  group_by(STATUS) %&amp;gt;%
  summarise(total_count = n()) %&amp;gt;%
  select(STATUS, total_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## now we will create a bar chart
ggplot(status_data, aes(x = STATUS, y = total_count)) +
  geom_bar(stat = &amp;#39;identity&amp;#39;, color = &amp;#39;red&amp;#39;, fill = &amp;#39;blue&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## your turn!

## Q5: create a bar chart of the total sales by country with the following properties:
##     - x axis label: Product Line
##     - y axis label: Total Sales ($)
##     - title: Sales by Product Line
##     - Outline of bars: red
##     - Fill of bars: pink

## Will first create a grouped by and summarised dataset
status_data &amp;lt;- sales_data %&amp;gt;%
  group_by(PRODUCTLINE) %&amp;gt;%
  summarise(total_sales = sum(SALES))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## bar plot
ggplot(status_data, aes(x = PRODUCTLINE, y = total_sales)) +
  geom_bar(stat = &amp;#39;identity&amp;#39;, color = &amp;#39;red&amp;#39;, fill = &amp;#39;pink&amp;#39;) +
  labs(title = &amp;#39;Sales by Product Line&amp;#39;) +
  theme_classic() +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Q6: using the ggplot2 cheat sheet, try constructing your own plot of choice!
## bar plot
ggplot(status_data, aes(x = PRODUCTLINE, y = total_sales)) +
  geom_bar(stat = &amp;#39;identity&amp;#39;, color = &amp;#39;red&amp;#39;, fill = &amp;#39;yellow&amp;#39;) +
  labs(title = &amp;#39;Sales by Product Line&amp;#39;) +
  theme_classic() +
  coord_polar()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/sales_analysis/2019-03-28-sales-analysis_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NYC_Fights13</title>
      <link>/post/nycflights13/nyc-fights13/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/nycflights13/nyc-fights13/</guid>
      <description>


&lt;div id=&#34;about-the-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;About the dataset&lt;/h2&gt;
&lt;p&gt;In this analysis, we explore the dplyr functions used to ask interesting questions of a more complex dataset We’ll use a dataset of flights that departed from New York city airports (including Newark, John F. Kennedy, and Laguardia airports) in 2013. This dataset is also featured online in the Introduction to dplyr vignette, and is drawn from the Bureau of Transportation Statistics database.&lt;/p&gt;
&lt;p&gt;This dataset will use over 300,000 observations to ask the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which airline has the highest number of delayed departures?&lt;/li&gt;
&lt;li&gt;On average, to which airport do flights arrive most early?&lt;/li&gt;
&lt;li&gt;In which month do flights tend to have the longest delays?&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;get-to-know-the-dataframe&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;get to know the dataframe&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## check the number of rows/columns
dim(flights)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 336776     19&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## inspect the column names
colnames(flights) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;year&amp;quot;           &amp;quot;month&amp;quot;          &amp;quot;day&amp;quot;            &amp;quot;dep_time&amp;quot;      
##  [5] &amp;quot;sched_dep_time&amp;quot; &amp;quot;dep_delay&amp;quot;      &amp;quot;arr_time&amp;quot;       &amp;quot;sched_arr_time&amp;quot;
##  [9] &amp;quot;arr_delay&amp;quot;      &amp;quot;carrier&amp;quot;        &amp;quot;flight&amp;quot;         &amp;quot;tailnum&amp;quot;       
## [13] &amp;quot;origin&amp;quot;         &amp;quot;dest&amp;quot;           &amp;quot;air_time&amp;quot;       &amp;quot;distance&amp;quot;      
## [17] &amp;quot;hour&amp;quot;           &amp;quot;minute&amp;quot;         &amp;quot;time_hour&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;identify-the-airline-carrier-that-has-the-highest-number-of-delayed-flights&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Identify the airline (&lt;code&gt;carrier&lt;/code&gt;) that has the highest number of delayed flights&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## start with the flights
has_most_delays &amp;lt;- flights %&amp;gt;%
  ## group by airline (carrier)
  group_by(carrier) %&amp;gt;%                    
  ## find only the delays
  filter(dep_delay &amp;gt; 0) %&amp;gt;%               
  ## count the observations
  summarize(num_delay = n()) %&amp;gt;%           
  ## find most delayed
  filter(num_delay == max(num_delay)) %&amp;gt;%  
  ## select the airline
  select(carrier)                          &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-name-of-the-most-delayed-carrier&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get name of the most delayed carrier&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## start with the previous answer
most_delayed_name &amp;lt;- has_most_delays %&amp;gt;%   
  ## join on airline ID
  left_join(airlines, by = &amp;quot;carrier&amp;quot;) %&amp;gt;%  
  ## select the airline name
  select(name)                             &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## access the value from the tibble
print(most_delayed_name$name)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;United Air Lines Inc.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-the-average-arrival-delay-arr_delay-for-each-destination-dest&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Calculate the average arrival delay (&lt;code&gt;arr_delay&lt;/code&gt;) for each destination (&lt;code&gt;dest&lt;/code&gt;)&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;most_early &amp;lt;- flights %&amp;gt;%
  ## group by destination
  group_by(dest) %&amp;gt;%                     
  ## compute mean delay
  summarize(delay = mean(arr_delay))     &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;compute-the-average-delay-by-destination-airport-omitting-na-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;# Compute the average delay by destination airport, omitting NA results&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;most_early &amp;lt;- flights %&amp;gt;%
  ## group by destination
  group_by(dest) %&amp;gt;%                                 
  ## compute mean delay
  summarize(delay = mean(arr_delay, na.rm = TRUE))   &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;identify-the-destination-where-flights-on-average-arrive-most-early&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Identify the destination where flights, on average, arrive most early&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;most_early &amp;lt;- flights %&amp;gt;%
  ## group by destination
  group_by(dest) %&amp;gt;%                                      
  ## compute mean delay, ignore NA
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %&amp;gt;%    
  ## filter for the *least* delayed
  filter(delay == min(delay, na.rm = TRUE)) %&amp;gt;%           
  ## select the destination (and delay to store it)
  select(dest, delay) %&amp;gt;%                                 
  ## join on `airports`dataframe
  left_join(airports, by = c(&amp;quot;dest&amp;quot; = &amp;quot;faa&amp;quot;)) %&amp;gt;%         
  ## select output variables of interest
  select(dest, name, delay)                               &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(most_early)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   dest  name       delay
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 LEX   Blue Grass   -22&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;identify-the-month-in-which-flights-tend-to-have-the-longest-delays&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Identify the month in which flights tend to have the longest delays&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;%
  ## group by selected feature
  group_by(month) %&amp;gt;%                                      
  ## summarize value of interest
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %&amp;gt;%     
  ## filter for the record of interest
  filter(delay == max(delay)) %&amp;gt;%                          
  ## select the column that answers the question
  select(month) %&amp;gt;%                                        
  ## print the tibble out directly
  print()                                                  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   month
##   &amp;lt;int&amp;gt;
## 1     7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;compute-delay-by-month-adding-month-names-for-visual-display-note-month.name-is-a-variable-build-into-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Compute delay by month, adding month names for visual display, note ‘month.name’ is a variable build into R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;delay_by_month &amp;lt;- flights %&amp;gt;%
  group_by(month) %&amp;gt;%
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %&amp;gt;%
  select(delay) %&amp;gt;%
  mutate(month = month.name)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-plot-using-the-ggplot2-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;# Create a plot using the ggplot2 package&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = delay_by_month) +
  geom_point(
    mapping = aes(x = delay, y = month), 
    color = &amp;quot;blue&amp;quot;,
    alpha = .4, 
    size = 3
    ) +
  geom_vline(xintercept = 0, size = .25) +
  xlim(c(-20, 20)) +
  scale_y_discrete(limits = rev(month.name)) +
  theme_classic() +
  labs(title = &amp;quot;Average Delay by Month&amp;quot;, y = &amp;quot;&amp;quot;, x = &amp;quot;Delay (minutes)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/nycflights13/2019-03-27-nyc-fights13_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bank ATM Cash Machine Forecast w/ Time Series</title>
      <link>/post/atm/bank/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/atm/bank/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;This document focuses on the time series analysis. The variable ‘Cash’ is provided in hundreds of dollars.&lt;/p&gt;
&lt;p&gt;This is a time series spanning daily transactions from May 1, 2009 to April 30, 2010 from four ATMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;research-question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Research question:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;forecast how much cash is taken out of 4 different ATM machines for May 2010&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory Data Analysis&lt;/li&gt;
&lt;li&gt;Visualizations&lt;/li&gt;
&lt;li&gt;ACF and PACF&lt;/li&gt;
&lt;li&gt;Clean The Data&lt;/li&gt;
&lt;li&gt;Trend Preview&lt;/li&gt;
&lt;li&gt;Data Decomposition Plot&lt;/li&gt;
&lt;li&gt;Stationarity Test&lt;/li&gt;
&lt;li&gt;Model Data&lt;/li&gt;
&lt;li&gt;Transformation&lt;/li&gt;
&lt;li&gt;ARIMA Model&lt;/li&gt;
&lt;li&gt;Evaluation&lt;/li&gt;
&lt;li&gt;Box-Ljung Test&lt;/li&gt;
&lt;li&gt;Forecasting&lt;/li&gt;
&lt;li&gt;Model Accuracy&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sourceURL &amp;lt;- &amp;quot;https://raw.githubusercontent.com/jzuniga123&amp;quot;
file &amp;lt;- &amp;quot;/SPS/master/DATA%20624/ATM624Data.xlsx&amp;quot;
download.file(paste0(sourceURL, file), &amp;quot;temp.xlsx&amp;quot;, mode=&amp;quot;wb&amp;quot;)
atm &amp;lt;- xlsx::read.xlsx(&amp;quot;temp.xlsx&amp;quot;, sheetIndex=1, header=T)
invisible(file.remove(&amp;quot;temp.xlsx&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview first 5 rows
head(atm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         DATE  ATM Cash
## 1 2009-05-01 ATM1   96
## 2 2009-05-01 ATM2  107
## 3 2009-05-02 ATM1   82
## 4 2009-05-02 ATM2   89
## 5 2009-05-03 ATM1   85
## 6 2009-05-03 ATM2   90&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(atm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(atm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    1474 obs. of  3 variables:
##  $ DATE: Date, format: &amp;quot;2009-05-01&amp;quot; &amp;quot;2009-05-01&amp;quot; ...
##  $ ATM : Factor w/ 4 levels &amp;quot;ATM1&amp;quot;,&amp;quot;ATM2&amp;quot;,..: 1 2 1 2 1 2 1 2 1 2 ...
##  $ Cash: num  96 107 82 89 85 90 90 55 99 79 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview descriptive statistics on quantitative and qualitative variables
summary(atm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       DATE              ATM           Cash        
##  Min.   :2009-05-01   ATM1:365   Min.   :    0.0  
##  1st Qu.:2009-08-01   ATM2:365   1st Qu.:    0.5  
##  Median :2009-11-01   ATM3:365   Median :   73.0  
##  Mean   :2009-10-31   ATM4:365   Mean   :  155.6  
##  3rd Qu.:2010-02-01   NA&amp;#39;s: 14   3rd Qu.:  114.0  
##  Max.   :2010-05-14              Max.   :10919.8  
##                                  NA&amp;#39;s   :19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Skewed distribution since the mean is higher than the third quartile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview periods between dates in the time series
xts::periodicity(unique(atm$DATE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Daily periodicity from 2009-05-01 to 2010-05-14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dataframe spans daily transactions from May 1, 2009 to May 14, 2010.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview observations that have no missing values
atm[!complete.cases(atm), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           DATE  ATM Cash
## 87  2009-06-13 ATM1   NA
## 93  2009-06-16 ATM1   NA
## 98  2009-06-18 ATM2   NA
## 105 2009-06-22 ATM1   NA
## 110 2009-06-24 ATM2   NA
## 731 2010-05-01 &amp;lt;NA&amp;gt;   NA
## 732 2010-05-02 &amp;lt;NA&amp;gt;   NA
## 733 2010-05-03 &amp;lt;NA&amp;gt;   NA
## 734 2010-05-04 &amp;lt;NA&amp;gt;   NA
## 735 2010-05-05 &amp;lt;NA&amp;gt;   NA
## 736 2010-05-06 &amp;lt;NA&amp;gt;   NA
## 737 2010-05-07 &amp;lt;NA&amp;gt;   NA
## 738 2010-05-08 &amp;lt;NA&amp;gt;   NA
## 739 2010-05-09 &amp;lt;NA&amp;gt;   NA
## 740 2010-05-10 &amp;lt;NA&amp;gt;   NA
## 741 2010-05-11 &amp;lt;NA&amp;gt;   NA
## 742 2010-05-12 &amp;lt;NA&amp;gt;   NA
## 743 2010-05-13 &amp;lt;NA&amp;gt;   NA
## 744 2010-05-14 &amp;lt;NA&amp;gt;   NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ATM transactions have missing values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(factor(atm$ATM)[!is.na(atm$Cash) &amp;amp; atm$Cash %% 1 != 0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ATM1 ATM2 ATM3 ATM4 
##    0    0    0  365&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are non-integer transactions at ATM 4 implying that these data are likely debit card purchase transactions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizations&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# time plot represents a line graph that plots each observed value against the time of the observation, with a single line connecting each observation across the entire period
par(mfrow=c(4, 2), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
for(i in 1:length(levels(atm$ATM))) {
  atm_sub &amp;lt;- subset(atm, ATM == paste0(&amp;quot;ATM&amp;quot;, i))
  atm_ts &amp;lt;- xts::xts(atm_sub$Cash, order.by=atm_sub$DATE)
  n &amp;lt;- nrow(atm_ts); l &amp;lt;- rep(1, n); m &amp;lt;- rep(20, n); h &amp;lt;- rep(100, n)
  print(plot(cbind(atm_ts, l, m,h), main=paste0(&amp;quot;ATM&amp;quot;, i)))
  
# histogram displays the frequency at which values in a vector occur.
  hist(atm_ts, col=&amp;quot;green&amp;quot;, xlab=&amp;quot;&amp;quot;, main=&amp;quot;&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Plots and Histograms for ATM1 and ATM2 are unremarkable.&lt;/li&gt;
&lt;li&gt;Time Plot and Histogram of ATM3 shows the data consists mostly of zero values with a handful of transactions occurring at the end of the series.&lt;/li&gt;
&lt;li&gt;ATM3 will not be modeled due to these degenerative properties.&lt;/li&gt;
&lt;li&gt;Time Plot and Histogram of ATM4 shows an extreme outlier around the three-quarter mark of the series. The horizontal lines in the Time Plots delineate $1, $20, and $100 in red, green, and blue; respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;acf-and-pacf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ACF and PACF&lt;/h2&gt;
&lt;p&gt;ACF plot shows the autocorrelations between each observation and its immediate predecessor (lagged observation). The PACF plot shows the autocorrelations between the current observation and each individual lagged observation The xts::xts()function converts data to a time series object which displays better in visualizations than time series objects created using other packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(4, 2), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
for(i in 1:length(levels(atm$ATM))) {
  atm_sub &amp;lt;- subset(atm, ATM == paste0(&amp;quot;ATM&amp;quot;, i))
  atm_ts &amp;lt;- xts::xts(atm_sub$Cash, order.by=atm_sub$DATE)
  acf(na.omit(atm_ts), ylab=paste0(&amp;quot;ACF ATM&amp;quot;, i), main=&amp;quot;&amp;quot;) 
  pacf(na.omit(atm_ts), ylab=paste0(&amp;quot;PACF ATM&amp;quot;, i), main=&amp;quot;&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACF and PACF plots for ATM1, ATM2, and ATM3 show autocorrelation between each observation and its immediate predecessor and autocorrelation between the current observation and other individual lagged observations. The ACF and PACF plots for ATM3 however, are not reliable due to the death of observations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;clean-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clean The Data&lt;/h2&gt;
&lt;p&gt;Data are cleaned using forecast::tsclean() and then converted to a time series object using the ts() function. The tsclean() function imputes nulls and removes outliers. The ts()function converts data to a time series object which is compatible with the forecast package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(i in 1:length(levels(atm$ATM))) {
  atm_num &amp;lt;- paste0(&amp;quot;ATM&amp;quot;, i)
  atm_sub &amp;lt;- subset(atm, ATM == atm_num, select=-2)
  atm_sub$Cash &amp;lt;- forecast::tsclean(atm_sub$Cash, replace.missing=T)
  assign(atm_num, ts(atm_sub$Cash, frequency = 7, start=start(atm_sub$DATE)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;trend-examine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trend Examine&lt;/h2&gt;
&lt;p&gt;A moving average smoother is helpful in examining what kind of trend is involved in a series. Moving average models should not be confused with moving average smoothing. A moving average model is used for forecasting future values while moving average smoothing is used for estimating the trend-cycle component of past values. The ma() function computes a simple moving average smoother of a given time series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(3, 1), mar = c(0, 4, 0, 0), oma = c(0, 0, 0.5, 0.5))
plot(ATM1, col=8, xaxt = &amp;quot;n&amp;quot;, ylab=&amp;quot;ATM1&amp;quot;)
lines(forecast::ma(ATM1, order=7), col=2)  # weekly
lines(forecast::ma(ATM1, order=30), col=4) # monthly
plot(ATM2, col=8, xaxt = &amp;quot;n&amp;quot;, ylab=&amp;quot;ATM3&amp;quot;)
lines(forecast::ma(ATM2, order=7), col=2)  # weekly
lines(forecast::ma(ATM2, order=30), col=4) # monthly
plot(ATM4, col=8, xaxt = &amp;quot;n&amp;quot;, ylab=&amp;quot;ATM4&amp;quot;)
lines(forecast::ma(ATM4, order=7), col=2)  # weekly
lines(forecast::ma(ATM4, order=30), col=4) # monthly&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 7-day (weekly) and 30-day (monthly) moving average smoother line shows that the data for the ATMs have no apparent trend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-decomposition-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Decomposition Plot&lt;/h2&gt;
&lt;p&gt;Decomposition Plot decomposes and plots the observed values, the underlying trend, seasonality, and randomness of the time series data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(decompose(ATM1), col=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(decompose(ATM2), col=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(decompose(ATM4), col=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plotting the trend-cycle and seasonal indices computed by additive decomposition shows that the data have no apparent trend, seasonal fluctuations, and fairly random residuals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;stationarity-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stationarity Test&lt;/h2&gt;
&lt;div id=&#34;dickey-fuller-test&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dickey-Fuller Test&lt;/h3&gt;
&lt;p&gt;An augmented Dickey-Fuller unit root test evaluates if the data exhibit a Stationarity process with deterministic trend or a Stationarity process with stochastic trend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tseries::adf.test(ATM1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in tseries::adf.test(ATM1): p-value smaller than printed p-value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Augmented Dickey-Fuller Test
## 
## data:  ATM1
## Dickey-Fuller = -4.5329, Lag order = 7, p-value = 0.01
## alternative hypothesis: stationary&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tseries::adf.test(ATM2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in tseries::adf.test(ATM2): p-value smaller than printed p-value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Augmented Dickey-Fuller Test
## 
## data:  ATM2
## Dickey-Fuller = -6.046, Lag order = 7, p-value = 0.01
## alternative hypothesis: stationary&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tseries::adf.test(ATM4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in tseries::adf.test(ATM4): p-value smaller than printed p-value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Augmented Dickey-Fuller Test
## 
## data:  ATM4
## Dickey-Fuller = -5.6304, Lag order = 7, p-value = 0.01
## alternative hypothesis: stationary&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The augmented Dickey-Fuller unit root test p-values are below α=0.05. Therefore, the null hypothesis that the data has unit roots is rejected. The data exhibit stochastic trend which suggests using regression (AR) in lieu of differencing. Autoregressive (AR) modeling acts like partial differencing when ϕ&amp;lt;1. When ϕ=1 the AR(1) model is like a first-order difference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;model-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Data&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;train&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; sets are created by referencing rows by index.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# train/test split
index_train &amp;lt;- 1:(length(ATM1) - 30)
ATM1_train &amp;lt;- ts(ATM1[index_train], frequency=7)
ATM1_test &amp;lt;- ts(ATM1[-index_train], frequency=7)
index_train &amp;lt;- 1:(length(ATM2) - 30)
ATM2_train &amp;lt;- ts(ATM2[index_train], frequency=7)
ATM2_test &amp;lt;- ts(ATM2[-index_train], frequency=7)
index_train &amp;lt;- 1:(length(ATM3) - 30)
ATM3_train &amp;lt;- ts(ATM3[index_train], frequency=7)
ATM3_test &amp;lt;- ts(ATM3[-index_train], frequency=7)
index_train &amp;lt;- 1:(length(ATM4) - 30)
ATM4_train &amp;lt;- ts(ATM4[index_train], frequency=7)
ATM4_test &amp;lt;- ts(ATM4[-index_train], frequency=7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The indexed rows for the test set are a window at the end of the times series. The window sized for the testing set is that of the desired prediction. The training set window is comprised of the indexes which are the complement of the test set indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;transformation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Transformation&lt;/h2&gt;
&lt;p&gt;The Augmented Dickey-Fuller Test results support not differencing. Data can be seasonally adjusted for modeling and then reseasonalized for predictions. The modeling algorithm being used evaluates seasonal components and produces predictions that reflect the seasonality in the underlying data. Therefore, the data need not be seasonally adjusted.Heteroskedasticity refers to the circumstance in which the variability of a variable is unequal across the range of values of a second variable. Box-Cox transformations can help to stabilize the variance of a time series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lambda1 &amp;lt;- forecast::BoxCox.lambda(ATM1_train))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.4355901&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lambda2 &amp;lt;- forecast::BoxCox.lambda(ATM2_train))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7156895&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lambda4 &amp;lt;- forecast::BoxCox.lambda(ATM4_train))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3945256&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Box-Cox transformation parameters suggested are around λ=0.5. This rounded (more interpretable) value is suggestive of a 1/yt‾‾√ transformation. These Box-Cox transformations stabilize the variance and make each series relatively homoskedastic with equal variance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arima-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ARIMA Model&lt;/h2&gt;
&lt;p&gt;The auto.arima() function chooses an ARIMA model automatically. It uses a variation of the Hyndman and Khandakar algorithm which combines unit root tests, minimization of the AICc, and MLE to obtain an ARIMA model. The function takes some short-cuts in order to speed up the computation and will not always yield the best model. Setting stepwise and approximation to FALSE prevents the function from taking short-cuts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(fit1 &amp;lt;- forecast::auto.arima(ATM1_train, stepwise=F, approximation=F, d=0, lambda=lambda1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Series: ATM1_train 
## ARIMA(0,0,2)(1,1,1)[7] 
## Box Cox transformation: lambda= 0.4355901 
## 
## Coefficients:
##          ma1      ma2    sar1     sma1
##       0.1449  -0.1116  0.1320  -0.7243
## s.e.  0.0547   0.0537  0.0893   0.0669
## 
## sigma^2 estimated as 6.441:  log likelihood=-770.86
## AIC=1551.73   AICc=1551.92   BIC=1570.69&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(fit2 &amp;lt;- forecast::auto.arima(ATM2_train, stepwise=F, approximation=F, d=0, lambda=lambda2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Series: ATM2_train 
## ARIMA(2,0,2)(0,1,1)[7] with drift 
## Box Cox transformation: lambda= 0.7156895 
## 
## Coefficients:
##           ar1      ar2     ma1     ma2     sma1    drift
##       -0.4282  -0.9254  0.4761  0.8044  -0.7672  -0.0246
## s.e.   0.0464   0.0413  0.0764  0.0555   0.0483   0.0155
## 
## sigma^2 estimated as 66.34:  log likelihood=-1152.83
## AIC=2319.66   AICc=2320.01   BIC=2346.21&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(fit4 &amp;lt;- forecast::auto.arima(ATM4_train, stepwise=F, approximation=F, d=0, lambda=lambda4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Series: ATM4_train 
## ARIMA(1,0,0)(2,0,0)[7] with non-zero mean 
## Box Cox transformation: lambda= 0.3945256 
## 
## Coefficients:
##          ar1    sar1    sar2     mean
##       0.0814  0.2060  0.1911  22.7977
## s.e.  0.0548  0.0537  0.0547   0.9477
## 
## sigma^2 estimated as 97.25:  log likelihood=-1240.53
## AIC=2491.06   AICc=2491.24   BIC=2510.13&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluate&lt;/h2&gt;
&lt;p&gt;ACF and PACF&lt;/p&gt;
&lt;p&gt;ACF plot shows the autocorrelations between each observation and its immediate predecessor (lagged observation). The PACF plot shows the autocorrelations between the current observation and each individual lagged observation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(3, 2), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
acf(residuals(fit1), ylab=&amp;quot;ACF ATM1&amp;quot;); pacf(residuals(fit1), ylab=&amp;quot;PACF ATM1&amp;quot;)
acf(residuals(fit2), ylab=&amp;quot;ACF ATM2&amp;quot;); pacf(residuals(fit2), ylab=&amp;quot;PACF ATM2&amp;quot;)
acf(residuals(fit4), ylab=&amp;quot;ACF ATM4&amp;quot;); pacf(residuals(fit4), ylab=&amp;quot;PACF ATM4&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The residuals of the models appear to display the characteristics of White Noise in the ACF and PACF plots with only one of the twenty residuals (or 0.05%) being significant. At a 95% confidence interval this is within probabilistic expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;box-ljung-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box-Ljung Test&lt;/h2&gt;
&lt;p&gt;The Box-Ljung test is helpful in assessing if data follow a White Noise pattern. The arma attribute of the fitted model returns a vector containing the ARIMA model parameters p,q,P,Q,period,d,and D; in that order.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Box.test(residuals(fit1), lag=7, fitdf=sum(fit1$arma[1:2]), type=&amp;quot;Ljung-Box&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Box-Ljung test
## 
## data:  residuals(fit1)
## X-squared = 5.7195, df = 5, p-value = 0.3345&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Box.test(residuals(fit2), lag=7, fitdf=sum(fit1$arma[1:2]), type=&amp;quot;Ljung-Box&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Box-Ljung test
## 
## data:  residuals(fit2)
## X-squared = 7.9286, df = 5, p-value = 0.1602&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Box.test(residuals(fit4), lag=7, fitdf=sum(fit1$arma[1:2]), type=&amp;quot;Ljung-Box&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Box-Ljung test
## 
## data:  residuals(fit4)
## X-squared = 4.6833, df = 5, p-value = 0.4557&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The null hypothesis of independence is not rejected. The Box-Ljung shows that the autocorrelations of the residuals from the models are not significantly different from zero at α=0.05. The residuals of the models display the characteristics of White Noise. The models pass the required checks and are therefore suitable for forecasting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;forecasting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Forecasting&lt;/h2&gt;
&lt;p&gt;ATM3 was not modeled due to its degenerative properties. To forecast values for ATM3, the model for an ATM with a similar mean will be used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(mean(ATM1), mean(ATM2), mean(ATM3[ATM3!=0]), mean(ATM4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  84.15479  62.59178  87.66667 444.75681&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of ATM1 is very close to the mean of the few values in ATM3. Therefore, the ARIMA(0,0,1)(2,0,0)7 ARIMA model for ATM1 will be used to make predictions for ATM3.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit3 &amp;lt;- forecast::Arima(ATM3_train, model=fit1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Forecasts are done using the forecast::forecast() function. Since the data were not seasonally adjusted, they need not be reseasonalized prior to forecast. Prediction point estimates are represented by a blue line, prediction intervals are represented by blue bands, and actual values are represented by a red line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fcast1 &amp;lt;- forecast::forecast(fit1, h=30)
fcast2 &amp;lt;- forecast::forecast(fit2, h=30)
fcast3 &amp;lt;- forecast::forecast(fit3, h=30)
fcast4 &amp;lt;- forecast::forecast(fit4, h=30)
par(mfrow=c(4, 1), mar = c(0, 4, 0, 0), oma = c(4, 4, 2, 0.5))
plot(fcast1, ylab=&amp;quot;Cash ATM1&amp;quot;, main=&amp;quot;&amp;quot;, xaxt=&amp;quot;n&amp;quot;); 
lines(lag(ATM1_test, -length(ATM1_train)), col=&amp;quot;red&amp;quot;)
plot(fcast2, ylab=&amp;quot;Cash ATM2&amp;quot;, main=&amp;quot;&amp;quot;, xaxt=&amp;quot;n&amp;quot;); 
lines(lag(ATM2_test, -length(ATM2_train)), col=&amp;quot;red&amp;quot;)
plot(fcast3, ylab=&amp;quot;Cash ATM3&amp;quot;, main=&amp;quot;&amp;quot;, xaxt=&amp;quot;n&amp;quot;)
lines(lag(ATM3_test, -length(ATM3_train)), col=&amp;quot;red&amp;quot;)
plot(fcast4, ylab=&amp;quot;Cash ATM4&amp;quot;, main=&amp;quot;&amp;quot;, xaxt=&amp;quot;n&amp;quot;)
lines(lag(ATM4_test, -length(ATM4_train)), col=&amp;quot;red&amp;quot;)
title(&amp;quot;ATM Predictions&amp;quot;, outer=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2019-02-07-bank_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The predictions appear to produce a useful forecasts that reflect patterns in the original data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;model-accuracy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Accuracy&lt;/h2&gt;
&lt;p&gt;The accuracy() function is helpful for obtaining summary measures of the forecast accuracy: Mean Error (ME), Root Mean Squared Error (RMSE), Mean Absolute Error (MAE), Mean Percentage Error (MPE), Mean Absolute Percentage Error (MAPE), Mean Absolute Scaled Error (MASE), and Autocorrelation of errors at lag 1 (ACF1).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(forecast::accuracy(fcast1, length(ATM1_test)), 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   ME   RMSE    MAE      MPE    MAPE  MASE  ACF1
## Training set   2.038 25.007 16.039  -96.186 114.754 0.427 0.011
## Test set     -53.187 53.187 53.187 -177.290 177.290 1.416    NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(forecast::accuracy(fcast2, length(ATM2_test)), 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   ME   RMSE    MAE      MPE    MAPE MASE   ACF1
## Training set   1.456 24.795 17.275     -Inf     Inf 0.40 -0.013
## Test set     -44.485 44.485 44.485 -148.284 148.284 1.03     NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(forecast::accuracy(fcast4, length(ATM4_test)), 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    ME    RMSE     MAE       MPE     MAPE MASE  ACF1
## Training set   96.204 360.567 280.446  -342.343  388.847 0.72 0.017
## Test set     -385.878 385.878 385.878 -1286.261 1286.261 0.99    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These accuracy for the predications vary. ATM1 and ATM2 predictions are more accurate than ATM4 predictions. The closer the original data are to being White Noise, the less accurate the predictions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Energy Forecasting w/ Time Series Analysis</title>
      <link>/post/residential_energy/residential-energy-usage/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/residential_energy/residential-energy-usage/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;This document focuses on the time series analysis. A simple dataset of residential power usage from January 1998 to December 2013.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;research-question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Research question:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;through an analysis, model this data and monthly forecast for 2014&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory Data Analysis&lt;/li&gt;
&lt;li&gt;Visualizations&lt;/li&gt;
&lt;li&gt;ACF and PACF&lt;/li&gt;
&lt;li&gt;Clean The Data&lt;/li&gt;
&lt;li&gt;Trend Preview&lt;/li&gt;
&lt;li&gt;Data Decomposition Plot&lt;/li&gt;
&lt;li&gt;Stationarity Test&lt;/li&gt;
&lt;li&gt;Model Data&lt;/li&gt;
&lt;li&gt;Transformation&lt;/li&gt;
&lt;li&gt;ARIMA Model&lt;/li&gt;
&lt;li&gt;Evaluation&lt;/li&gt;
&lt;li&gt;Box-Ljung Test&lt;/li&gt;
&lt;li&gt;Forecasting&lt;/li&gt;
&lt;li&gt;Model Accuracy&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sourceURL &amp;lt;- &amp;quot;https://raw.githubusercontent.com/jzuniga123&amp;quot;
file &amp;lt;- &amp;quot;/SPS/master/DATA%20624/ResidentialCustomerForecastLoad-624.xlsx&amp;quot;
download.file(paste0(sourceURL, file), &amp;quot;temp.xlsx&amp;quot;, mode=&amp;quot;wb&amp;quot;)
energy &amp;lt;- xlsx::read.xlsx(&amp;quot;temp.xlsx&amp;quot;, sheetIndex=1, header=T)

# the “YYYY-MMM” format dates are interpreted as factors. They must be converted to dates
energy$YYYY.MMM &amp;lt;- as.Date(paste0(energy$YYYY.MMM,&amp;quot;-01&amp;quot;), format = &amp;quot;%Y-%b-%d&amp;quot;)
invisible(file.remove(&amp;quot;temp.xlsx&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(energy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   CaseSequence   YYYY.MMM     KWH
## 1          733 1998-01-01 6862583
## 2          734 1998-02-01 5838198
## 3          735 1998-03-01 5420658
## 4          736 1998-04-01 5010364
## 5          737 1998-05-01 4665377
## 6          738 1998-06-01 6467147&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview the class of the dataset
class(energy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(energy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    192 obs. of  3 variables:
##  $ CaseSequence: num  733 734 735 736 737 738 739 740 741 742 ...
##  $ YYYY.MMM    : Date, format: &amp;quot;1998-01-01&amp;quot; &amp;quot;1998-02-01&amp;quot; ...
##  $ KWH         : num  6862583 5838198 5420658 5010364 4665377 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview descriptive statistics on quantitative and qualitative variables
summary(energy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   CaseSequence      YYYY.MMM               KWH          
##  Min.   :733.0   Min.   :1998-01-01   Min.   :  770523  
##  1st Qu.:780.8   1st Qu.:2001-12-24   1st Qu.: 5429912  
##  Median :828.5   Median :2005-12-16   Median : 6283324  
##  Mean   :828.5   Mean   :2005-12-15   Mean   : 6502475  
##  3rd Qu.:876.2   3rd Qu.:2009-12-08   3rd Qu.: 7620524  
##  Max.   :924.0   Max.   :2013-12-01   Max.   :10655730  
##                                       NA&amp;#39;s   :1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview the periods between dates in dataset
xts::periodicity(unique(energy$YYYY.MMM))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Monthly periodicity from 1998-01-01 to 2013-12-01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dataframe spans monthly from January 1, 1998 to December 1, 2013.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview observations in the dataframe that have no missing values
energy[!complete.cases(energy), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     CaseSequence   YYYY.MMM KWH
## 129          861 2008-09-01  NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dataframe contains one missing value in kWh usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizations&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plots each observed value against the time of the observation, with a single line connecting each observation across the entire period
kWh &amp;lt;- xts::xts(energy$KWH, order.by=energy$YYYY.MMM)
par(mfrow=c(2, 1), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
plot(kWh, main=&amp;quot;kWh&amp;quot;)

# display frequency at which values in a vector occur
hist(kWh, col=&amp;quot;yellow&amp;quot;, xlab=&amp;quot;&amp;quot;, main=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Obervations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line plot and Histogram shows an outlier around the three-quarter mark of the series.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;acf-and-pacf&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ACF and PACF&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2, 1), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
# ACF autocorrelations between each observation and its immediate predecessor (lagged observation)
acf(na.omit(kWh), ylab=&amp;quot;kWh&amp;quot;, main=&amp;quot;&amp;quot;) 

# PACF autocorrelations between the current observation and each individual lagged observation
pacf(na.omit(kWh), ylab=&amp;quot;kWh&amp;quot;, main=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACF and PACF plots show autocorrelation between each observation and its immediate predecessor and autocorrelation between the current observation and other individual lagged observations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;clean-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clean The Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data cleaning w/ forecast::tsclean() and converted to a time series object using the ts(). 
# tsclean() function imputes nulls and removes outliers.
# ts() function converts data to a time series object which is compatible with the forecast package.
kWh &amp;lt;- ts(forecast::tsclean(energy$KWH, replace.missing=T), 
          frequency = 12, start=start(energy$YYYY.MMM)) # data sampled monthly = 12
kWh[kWh==min(kWh)] &amp;lt;- mean(kWh[kWh!=min(kWh)])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;trend-preview&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trend Preview&lt;/h2&gt;
&lt;p&gt;A moving average smoother is helpful in examining what kind of trend is involved in a series. Moving average models should not be confused with moving average smoothing. A moving average model is used for forecasting future values while moving average smoothing is used for estimating the trend-cycle component of past values. The ma() function computes a simple moving average smoother of a given time series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(kWh, col=8, xaxt = &amp;quot;n&amp;quot;, ylab=&amp;quot;ATM1&amp;quot;)
lines(forecast::ma(kWh, order=6), col=6)  # pink line biannual period
lines(forecast::ma(kWh, order=12), col=4) # blue line annual period&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 6-month and 12-month moving average smoother line shows that the data has a slight apparent trend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-decomposition-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Decomposition Plot&lt;/h2&gt;
&lt;p&gt;Decomposes and plots the &lt;strong&gt;observed&lt;/strong&gt; values, the underlying &lt;strong&gt;trend,&lt;/strong&gt; &lt;strong&gt;seasonality,&lt;/strong&gt; and &lt;strong&gt;randomness&lt;/strong&gt; of the time series data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(decompose(kWh), col=5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Obseravations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plotting the trend-cycle and seasonal indices computed by additive decomposition shows that the data have a slight apparent trend, seasonal fluctuations, and fairly random residuals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;stationarity-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stationarity Test&lt;/h2&gt;
&lt;div id=&#34;dickey_fuller-test&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dickey_Fuller Test&lt;/h3&gt;
&lt;p&gt;An augmented Dickey-Fuller unit root test evaluates if the data exhibit a Stationarity process with deterministic trend or a Stationarity process with stochastic trend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tseries::adf.test(kWh)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in tseries::adf.test(kWh): p-value smaller than printed p-value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Augmented Dickey-Fuller Test
## 
## data:  kWh
## Dickey-Fuller = -4.5454, Lag order = 5, p-value = 0.01
## alternative hypothesis: stationary&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The augmented Dickey-Fuller unit root test p-value is below α=0.05. Therefore, the null hypothesis that the data has unit roots is rejected. The data exhibit stochastic trend which suggests using regression (AR) in lieu of differencing. Autoregressive (AR) modeling acts like partial differencing when ϕ&amp;lt;1. When ϕ=1 the AR(1) model is like a first-order difference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;model-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Data&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;train&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; sets are created by referencing rows w/ index. The indexed rows for the testing set are a window at the end of the times series. The window sized for the test set is that of the desired prediction. The training set window is comprised of the indexes which are the complement of the test set indexes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;index_train &amp;lt;- 1:(length(kWh) - 12)
kWh_train &amp;lt;- ts(kWh[index_train], frequency=12)
kWh_test &amp;lt;- ts(kWh[index_train], frequency=12)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;transformation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Transformation&lt;/h2&gt;
&lt;p&gt;The Augmented Dickey-Fuller Test results support not differencing. Data can be seasonally adjusted for modeling and then reseasonalized for predictions. The modeling algorithm being used evaluates seasonal components and produces predictions that reflect the seasonality in the underlying data. Therefore, the data need not be seasonally adjusted. Heteroskedasticity refers to the circumstance in which the variability of a variable is unequal across the range of values of a second variable. Box-Cox transformations can help to stabilize the variance of a time series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lambda &amp;lt;- forecast::BoxCox.lambda(kWh_train))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.1733063&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Box-Cox transformation parameter suggested is about λ=−0.25. This rounded (slightly more interpretable) value is suggestive of an inverse quartic root. This Box-Cox transformation stabilizes the variance and makes the series relatively homoskedastic with equal variance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arima-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ARIMA Model&lt;/h2&gt;
&lt;p&gt;The auto.arima() function chooses an ARIMA model automatically. It uses a variation of the Hyndman and Khandakar algorithm which combines unit root tests, minimization of the AICc, and MLE to obtain an ARIMA model. The function takes some short-cuts in order to speed up the computation and will not always yield the best model. Setting stepwise and approximation to FALSE prevents the function from taking short-cuts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(fit &amp;lt;- forecast::auto.arima(kWh_train, stepwise=F, approximation=F, d=0, lambda=lambda))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Series: kWh_train 
## ARIMA(0,0,3)(2,1,0)[12] with drift 
## Box Cox transformation: lambda= -0.1733063 
## 
## Coefficients:
##          ma1     ma2     ma3     sar1     sar2  drift
##       0.2807  0.0855  0.2232  -0.7724  -0.4408  1e-04
## s.e.  0.0757  0.0823  0.0687   0.0742   0.0812  1e-04
## 
## sigma^2 estimated as 3.707e-05:  log likelihood=621.98
## AIC=-1229.95   AICc=-1229.25   BIC=-1208.08&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The auto.arima() function suggests an ARIMA(0,0,3)(2,1,0)12 model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2, 1), mar = c(3, 5, 0, 0), oma = c(0, 0, 0.5, 0.5))
acf(residuals(fit), ylab=&amp;quot;ACF kWh&amp;quot;); pacf(residuals(fit), ylab=&amp;quot;PACF kWh&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The residuals of the model appear to display the characteristics of White Noise in both the ACF and PACF plots. None of the residuals are significant. At a 95% confidence interval this is well within probabilistic expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;box-ljung-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box-Ljung Test&lt;/h2&gt;
&lt;p&gt;The Box-Ljung test is helpful in assessing if data follow a White Noise pattern. The ARIMA attribute of the fitted model returns a vector containing the ARIMA model parameters p,q,P,Q,periods,d and D; in that order.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Box.test(residuals(fit), lag=7, fitdf=sum(fit$arma[1:2]), type=&amp;quot;Ljung-Box&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Box-Ljung test
## 
## data:  residuals(fit)
## X-squared = 7.2523, df = 4, p-value = 0.1231&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The null hypothesis of independence is not rejected. The Box-Ljung shows that the autocorrelations of the residuals from the model are not significantly different from zero at α=0.05. The residuals of the model displays the characteristics of White Noise. The model passes the required checks and is therefore suitable for forecasting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;forecasting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Forecasting&lt;/h2&gt;
&lt;p&gt;Forecasts are done using the forecast::forecast() function. Since the data was not seasonally adjusted, they need not be reseasonalized prior to forecast.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fcast &amp;lt;- forecast::forecast(fit, h=15)
plot(fcast, ylab=&amp;quot;kWh&amp;quot;, main=&amp;quot;kWh Predictions&amp;quot;, xaxt=&amp;quot;n&amp;quot;)
lines(lag(kWh_test, -length(kWh_train)), col=6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/residential_energy/2019-02-07-residential-energy-usage_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The prediction appears to produce a useful forecasts that reflect patterns in the original data.&lt;/li&gt;
&lt;li&gt;Prediction point estimates are represented by a blue line, prediction intervals are represented by blue bands, and actual values are represented by a pink line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;model-accuracy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Accuracy&lt;/h2&gt;
&lt;p&gt;The accuracy() function is helpful for obtaining summary measures of the forecast accuracy: Mean Error (ME), Root Mean Squared Error (RMSE), Mean Absolute Error (MAE), Mean Percentage Error (MPE), Mean Absolute Percentage Error (MAPE), Mean Absolute Scaled Error (MASE), and Autocorrelation of errors at lag 1 (ACF1).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(forecast::accuracy(fcast, length(kWh_test)), 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                       ME      RMSE       MAE          MPE        MAPE
## Training set    39449.18  581186.1  456353.6        0.056       7.067
## Test set     -9046871.23 9046871.2 9046871.2 -5026039.573 5026039.573
##               MASE  ACF1
## Training set 0.413 0.115
## Test set     8.185    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These accuracy for the predications is fair. The large metrics are representative of the large values found in the data.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Energy Efficiency on Buildings</title>
      <link>/post/energye/energye/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/energye/energye/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;The dataset is available at [&lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/Energy+efficiency&#34; class=&#34;uri&#34;&gt;https://archive.ics.uci.edu/ml/datasets/Energy+efficiency&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reseach-questions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reseach questions:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;to explore three data points, and visualize how they influence the energy load.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following variables &lt;strong&gt;Wall.Area&lt;/strong&gt;, &lt;strong&gt;Roof.Area&lt;/strong&gt;, &lt;strong&gt;Glazing.Area&lt;/strong&gt; are identified as key indicators that can influence the energy load efficiency for both (Heating and Cooling spaces).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;p&gt;A time series forecast using the arima model as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory Data Analysis&lt;/li&gt;
&lt;li&gt;Plot Load Distribution Using Scatter Plot&lt;/li&gt;
&lt;li&gt;Plot Heating Load Efficiency&lt;/li&gt;
&lt;li&gt;Plot Cooling Load Efficiency&lt;/li&gt;
&lt;li&gt;Plot Energy Efficiency&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())

sourceURL &amp;lt;- &amp;quot;https://raw.githubusercontent.com/StephenElston/DataScience350/master/Lecture1/EnergyEfficiencyData.csv&amp;quot;

df &amp;lt;- read.csv( sourceURL, header = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Relative.Compactness Surface.Area Wall.Area Roof.Area Overall.Height
## 1                 0.98        514.5     294.0    110.25              7
## 2                 0.98        514.5     294.0    110.25              7
## 3                 0.98        514.5     294.0    110.25              7
## 4                 0.98        514.5     294.0    110.25              7
## 5                 0.90        563.5     318.5    122.50              7
## 6                 0.90        563.5     318.5    122.50              7
##   Orientation Glazing.Area Glazing.Area.Distribution Heating.Load
## 1           2            0                         0        15.55
## 2           3            0                         0        15.55
## 3           4            0                         0        15.55
## 4           5            0                         0        15.55
## 5           2            0                         0        20.84
## 6           3            0                         0        21.46
##   Cooling.Load
## 1        21.33
## 2        21.33
## 3        21.33
## 4        21.33
## 5        28.28
## 6        25.38&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    768 obs. of  10 variables:
##  $ Relative.Compactness     : num  0.98 0.98 0.98 0.98 0.9 0.9 0.9 0.9 0.86 0.86 ...
##  $ Surface.Area             : num  514 514 514 514 564 ...
##  $ Wall.Area                : num  294 294 294 294 318 ...
##  $ Roof.Area                : num  110 110 110 110 122 ...
##  $ Overall.Height           : num  7 7 7 7 7 7 7 7 7 7 ...
##  $ Orientation              : int  2 3 4 5 2 3 4 5 2 3 ...
##  $ Glazing.Area             : num  0 0 0 0 0 0 0 0 0 0 ...
##  $ Glazing.Area.Distribution: int  0 0 0 0 0 0 0 0 0 0 ...
##  $ Heating.Load             : num  15.6 15.6 15.6 15.6 20.8 ...
##  $ Cooling.Load             : num  21.3 21.3 21.3 21.3 28.3 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Categorize useful variables and convert them to a categorical variables, namely &lt;strong&gt;Orientation&lt;/strong&gt;, &lt;strong&gt;Glazing.Area.Distribution&lt;/strong&gt;, and &lt;strong&gt;Glazing.Area&lt;/strong&gt; (variance) variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## change vector values to factor values
df$Orientation &amp;lt;- as.factor(df$Orientation) 

## attributes of variable 
levels(df$Orientation) &amp;lt;- c(&amp;quot;North&amp;quot;, &amp;quot;East&amp;quot;, &amp;quot;South&amp;quot;, &amp;quot;West&amp;quot;)

## change vector values to factor values
df$Glazing.Area.Distribution &amp;lt;- as.factor(df$Glazing.Area.Distribution)

## attributes of variable
levels(df$Glazing.Area.Distribution) &amp;lt;- c(&amp;quot;UnKnown&amp;quot;, &amp;quot;Uniform&amp;quot;, &amp;quot;North&amp;quot;, &amp;quot;East&amp;quot;, &amp;quot;South&amp;quot;, &amp;quot;West&amp;quot;)

## change vector values to factor values
df$Glazing.Area &amp;lt;- as.factor(df$Glazing.Area) 

## attributes of variable
levels(df$Glazing.Area) &amp;lt;- c(&amp;quot;0%&amp;quot;, &amp;quot;10%&amp;quot;, &amp;quot;25%&amp;quot;, &amp;quot;40%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Relative.Compactness  Surface.Area     Wall.Area       Roof.Area    
##  Min.   :0.6200       Min.   :514.5   Min.   :245.0   Min.   :110.2  
##  1st Qu.:0.6825       1st Qu.:606.4   1st Qu.:294.0   1st Qu.:140.9  
##  Median :0.7500       Median :673.8   Median :318.5   Median :183.8  
##  Mean   :0.7642       Mean   :671.7   Mean   :318.5   Mean   :176.6  
##  3rd Qu.:0.8300       3rd Qu.:741.1   3rd Qu.:343.0   3rd Qu.:220.5  
##  Max.   :0.9800       Max.   :808.5   Max.   :416.5   Max.   :220.5  
##  Overall.Height Orientation Glazing.Area Glazing.Area.Distribution
##  Min.   :3.50   North:192   0% : 48      UnKnown: 48              
##  1st Qu.:3.50   East :192   10%:240      Uniform:144              
##  Median :5.25   South:192   25%:240      North  :144              
##  Mean   :5.25   West :192   40%:240      East   :144              
##  3rd Qu.:7.00                            South  :144              
##  Max.   :7.00                            West   :144              
##   Heating.Load    Cooling.Load  
##  Min.   : 6.01   Min.   :10.90  
##  1st Qu.:12.99   1st Qu.:15.62  
##  Median :18.95   Median :22.08  
##  Mean   :22.31   Mean   :24.59  
##  3rd Qu.:31.67   3rd Qu.:33.13  
##  Max.   :43.10   Max.   :48.03&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-load-distribution-using-scatter-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Load Distribution Using Scatter Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## visualize if there is any relation between &amp;#39;Roof.Area&amp;#39;, &amp;#39;Surface.Area&amp;#39; and &amp;#39;Glazing.Area&amp;#39; and how load is distributed using scatter plot.
ggplot(df, aes(x = Cooling.Load, y = Heating.Load), alpha = 0.5)+
  geom_point(aes(colour = Roof.Area ))+
  facet_grid(Overall.Height + Glazing.Area ~ Surface.Area,  space = &amp;quot;free&amp;quot;) +
  ggtitle(&amp;quot;Load distribuiton of energy by Roof Area and Surface Area \n by Glazing Area and Overall Height&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyE/2019-02-03-energye_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Roof area and Surface area range is high for minimum/ lowest (3.5) over-all height and&lt;/li&gt;
&lt;li&gt;Roof area and Surface area range is low for maximum/ highest (7.0) over-all height.&lt;/li&gt;
&lt;li&gt;There are no data points when the overall height is 7 and highest surface area range and also for low overall height 3.5, we have no data points with the low surface area range.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-heating-load-efficiency&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Heating Load Efficiency&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## plot how &amp;#39;Wall.Area&amp;#39; influence heating load using raster plot.
ggplot(df, aes( Surface.Area, Roof.Area)) +
  geom_raster(aes(fill = Heating.Load), interpolate = TRUE) +
  scale_fill_gradient(low = &amp;quot;steelblue&amp;quot;, high = &amp;quot;red&amp;quot;)+
  facet_wrap(~Wall.Area, scales = &amp;quot;free&amp;quot; )+
  ggtitle(&amp;#39;Measuring Heating Load distribution \n by Wall Area, Surface Area and Roof Area&amp;#39;) +
  xlab(&amp;#39;Surface Area&amp;#39;) + ylab(&amp;#39;Roof Area&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyE/2019-02-03-energye_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By looking at the figures, we can conclude that &lt;strong&gt;Wall Area&lt;/strong&gt; plays a significant role in heating, irrespective of Surface Area and Roof Area. (Higher the wall area, higher the heating load).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-cooling-load-efficiency&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Cooling Load Efficiency&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## plot how &amp;#39;Wall.Area&amp;#39; influence cooling load using raster plot.
ggplot(df, aes(Surface.Area, Roof.Area)) +
  geom_raster(aes(fill = Cooling.Load), interpolate = TRUE) +
  scale_fill_gradient(low = &amp;quot;grey&amp;quot;, high = &amp;quot;steelblue&amp;quot;)+
  facet_wrap(~Wall.Area, scales = &amp;quot;free&amp;quot; )+
  ggtitle(&amp;#39;Measuring Cooling Load distribution \n by Wall Area, Surface Area and Roof Area&amp;#39;) +
  xlab(&amp;#39;Surface Area&amp;#39;) + ylab(&amp;#39;Roof Area&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyE/2019-02-03-energye_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So, &lt;strong&gt;Wall Area&lt;/strong&gt; plays a significant role in both Heating and Cooling Load efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-energy-efficiency&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Energy Efficiency&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## we have seen more variation in load data when the overall height is (7.0). So lets create a subset named(energy.eff.sub7.0) which contains the filtered data with overall height = 7.0. Lets visualize, if the &amp;#39;Roof.Area&amp;#39;, &amp;#39;Wall.Area&amp;#39;, &amp;#39;Surface.Area&amp;#39; and &amp;#39;Glazing.Area&amp;#39; are influencing the load efficiency.
energy.eff.sub7.0 &amp;lt;- df[ df$Overall.Height ==7.0,]
ggplot(energy.eff.sub7.0,
       aes(x = Cooling.Load, y = Heating.Load, group = factor(round(Wall.Area)), 
           size = Glazing.Area,
           shape = factor(round(Wall.Area))))+
  geom_point(aes(colour= factor(round(Surface.Area))), alpha = 0.3)+
  geom_smooth(method = &amp;quot;lm&amp;quot;,se = TRUE )+
  facet_wrap(~ Roof.Area) +
  ggtitle(&amp;#39;Load efficiency by Roof Area, by Wall Area by Surface Area and by Glazing Area&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyE/2019-02-03-energye_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is clearly evident that the Load efficiency is influenced by the Roof Area, Wall Area, Surface Area, and Glazing Area.&lt;/li&gt;
&lt;li&gt;When the Glazing Area is high, Roof Area is high and Wall Area is high, Load will be high and viceversa.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Energy Demand Analysis w/ Time Series Forecasting</title>
      <link>/post/energyd/energy-demand-analysis-w-time-series-forecasting/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/energyd/energy-demand-analysis-w-time-series-forecasting/</guid>
      <description>


&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;R. H. Shumway, D. S. Stoffer. &lt;em&gt;Time Series Analysis and Its Applications&lt;/em&gt;. 2010.&lt;/li&gt;
&lt;li&gt;R. J. Hyndman. &lt;em&gt;Forecasting: principles and practice&lt;/em&gt;. 2013.&lt;/li&gt;
&lt;li&gt;P. S. P. Cowpertwait, A. V. Metcalfe. &lt;em&gt;Introductory Time Series with R&lt;/em&gt;. 2009.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;This document focuses on an analysis of the energy demands of a European country.&lt;/p&gt;
&lt;p&gt;The dataset of the daily energy needs (in GWh) between 2004 and 2010.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reseach-questions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reseach questions:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;build a model for energy demand forecasting using time series analysis.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;p&gt;A time series forecast using the arima model as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory data analysis&lt;/li&gt;
&lt;li&gt;Data decomposition&lt;/li&gt;
&lt;li&gt;seasonal ARIMA model&lt;/li&gt;
&lt;li&gt;Forecast model&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sourceURL &amp;lt;- &amp;#39;https://gist.githubusercontent.com/Peque/715e91350f0e68e3342f/raw/d28312ac0e49888a5079fcea188770acaf3aa4a2/mme.csv&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# download and load data into memory
tmp &amp;lt;- tempfile()
download.file(sourceURL, tmp, method = &amp;#39;curl&amp;#39;)
df &amp;lt;- read.csv(tmp)
unlink(tmp)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory data analysis&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       date demand
## 1 01-01-04 488.07
## 2 02-01-04 582.02
## 3 03-01-04 575.58
## 4 04-01-04 542.39
## 5 05-01-04 600.26
## 6 06-01-04 544.76&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# convert date strings to POSIX dates
df$date &amp;lt;- strptime(df$date, format = &amp;#39;%d-%m-%y&amp;#39;)
# day of week
df$day &amp;lt;- as.factor(strftime(df$date, format = &amp;#39;%A&amp;#39;))
# day of year
df$yearday &amp;lt;- as.factor(strftime(df$date, format = &amp;#39;%m%d&amp;#39;))
# structure for analysis
str(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    3288 obs. of  4 variables:
##  $ date   : POSIXlt, format: &amp;quot;2004-01-01&amp;quot; &amp;quot;2004-01-02&amp;quot; ...
##  $ demand : num  488 582 576 542 600 ...
##  $ day    : Factor w/ 7 levels &amp;quot;Friday&amp;quot;,&amp;quot;Monday&amp;quot;,..: 5 1 3 4 2 6 7 5 1 3 ...
##  $ yearday: Factor w/ 366 levels &amp;quot;0101&amp;quot;,&amp;quot;0102&amp;quot;,..: 1 2 3 4 5 6 7 8 9 10 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# df split to create test set
df_test &amp;lt;- subset(df, date &amp;gt;= strptime(&amp;#39;01-01-2011&amp;#39;, format = &amp;#39;%d-%m-%Y&amp;#39;))
df &amp;lt;- subset(df, date &amp;lt; strptime(&amp;#39;01-01-2011&amp;#39;, format = &amp;#39;%d-%m-%Y&amp;#39;))
ts &amp;lt;- ts(df$demand, frequency = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# df and time series objects
demandts &amp;lt;- xts(df$demand, df$date)
plot(demandts, main = &amp;#39;Energy Demand Preview&amp;#39;, xlab = &amp;#39;Time&amp;#39;, ylab = &amp;#39;Demand (GWh)&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A seasonal dependency of demand can be easily spotted in the graphics, although there are other factors that may affect the results, such as the temperature, holidays, weekends, etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# demand by day of the week
ggplot(df, aes(day, demand)) +
  geom_boxplot(fill=&amp;#39;slateblue&amp;#39;, alpha=0.2) + xlab(&amp;#39;Time&amp;#39;) + ylab(&amp;#39;Demand (GWh)&amp;#39;) + ggtitle(&amp;#39;Demand per day of the week&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During weekends, the demand decreases considerably compared to the rest of the week days.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# aggregating demand by day of the year (average)
avg_demand_per_yearday &amp;lt;- aggregate(demand ~ yearday, df, &amp;#39;mean&amp;#39;)

# computing the smooth curve for the time series. Data is replicated before computing the curve in order to achieve continuity
smooth_yearday &amp;lt;- rbind(avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday, avg_demand_per_yearday)
smooth_yearday &amp;lt;- lowess(smooth_yearday$demand, f = 1 / 45)
l &amp;lt;- length(avg_demand_per_yearday$demand)
l0 &amp;lt;- 2 * l + 1
l1 &amp;lt;- 3 * l
smooth_yearday &amp;lt;- smooth_yearday$y[l0:l1]

# plotting results
par(mfrow = c(1, 1))

# setting year to 2000 to allow existence of 29th February
dates &amp;lt;- as.Date(paste(levels(df$yearday), &amp;#39;2000&amp;#39;), format = &amp;#39;%m%d%Y&amp;#39;)
plot(dates, avg_demand_per_yearday$demand, type = &amp;#39;l&amp;#39;, main = &amp;#39;Average Daily Demand&amp;#39;, xlab = &amp;#39;Time&amp;#39;, ylab = &amp;#39;Demand (GWh)&amp;#39;)
lines(dates, smooth_yearday, col = &amp;#39;yellow&amp;#39;, lwd = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;During the winter &amp;amp; summer seasons the demand is clearly higher exept for, vacation periods. Holydays are also easily spotted in the graphics, being the lowest peaks of demand.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1, 2))
diff &amp;lt;- avg_demand_per_yearday$demand - smooth_yearday
abs_diff &amp;lt;- abs(diff)
barplot(diff[order(-abs_diff)], main = &amp;#39;Smoothing error&amp;#39;, ylab = &amp;#39;Error&amp;#39;)
boxplot(diff, main = &amp;#39;Smoothing error&amp;#39;, ylab = &amp;#39;Error&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The graphics show the errors. Notice how the biggest errors are all negative.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(strftime(dates[order(-abs_diff)], format = &amp;#39;%B %d&amp;#39;), 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;January 01&amp;quot;  &amp;quot;December 25&amp;quot; &amp;quot;May 01&amp;quot;      &amp;quot;January 06&amp;quot;  &amp;quot;August 15&amp;quot;  
##  [6] &amp;quot;December 08&amp;quot; &amp;quot;December 31&amp;quot; &amp;quot;October 12&amp;quot;  &amp;quot;November 01&amp;quot; &amp;quot;December 26&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The exact dates which are generating these errors are indeed, holidays or the day just before holidays (as is the case for the 25th November and 31th Devember).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(2, 2))
acf(df$demand, 100, main = &amp;#39;Autocorrelation&amp;#39;)
acf(df$demand, 1500, main = &amp;#39;Autocorrelation&amp;#39;)
pacf(df$demand, 100, main = &amp;#39;Partial autocorrelation&amp;#39;)
pacf(df$demand, 1500, main = &amp;#39;Partial autocorrelation&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The autocorrelation function shows a highly autocorrelated seasonal non-stationary process with, as expected, yearly and weekly cicles. The ACF alone, however, tells us little about the orders of dependence for ARMIA or AR processes. The PACF is better for AR models, and also shows the weekly and yearly seasons, although the correlation is lost faster with the lag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-decomposition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data decomposition&lt;/h2&gt;
&lt;p&gt;I’ll decompose the time series for estimates of trend, seasonal, and random components using moving average method.&lt;/p&gt;
&lt;p&gt;The model is:&lt;/p&gt;
&lt;p&gt;Y[t]=T[t]∗S[t]∗e[t]&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;Y(t) is the number of weeks at time t,
T(t) is the trend component at time t,
S(t) is the seasonal component at time t,
e(t) is the random error component at time t.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# decomposition of weekly seasonal time series
wts &amp;lt;- ts(ts, frequency = 7)
dec_wts &amp;lt;- decompose(wts)
plot(dec_wts)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# demand minus week seasonal
df$demand_mws &amp;lt;- df$demand - as.numeric(dec_wts$season)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# decomposition of yearly time series
yts &amp;lt;- ts(subset(df, yearday != &amp;#39;0229&amp;#39;)$demand_mws, frequency = 365)
dec_yts &amp;lt;- decompose(yts)
plot(dec_yts)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;
Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decomposition of the yearly seasonal time series. 29th February days are excluded for frequency matching. The time series is formed out of the original observation minus the weekly seasonal data.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;days365 &amp;lt;- which(df$yearday != &amp;#39;0229&amp;#39;)
february29ths &amp;lt;- which(df$yearday == &amp;#39;0229&amp;#39;)
df$demand_mwys[days365] &amp;lt;- df$demand_mws[days365] - as.numeric(dec_yts$season)
# Fill values on February 29th
df$demand_mwys[february29ths] &amp;lt;- df$demand_mws[february29ths]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# form new ts from original observations less the weekly and yearly seasonal data
par(mfrow = c(1, 1))
ts_mwys &amp;lt;- ts(df$demand_mwys, frequency = 1)
demandts_mwys &amp;lt;- xts(df$demand_mwys, df$date)
plot(demandts_mwys, main = &amp;#39;Energy Demand Less Seasonal Data&amp;#39;, xlab = &amp;#39;Time&amp;#39;, ylab = &amp;#39;Demand (GWh)&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# aggregating demand by day of the year (average)
avg_demand_mwys_per_yearday &amp;lt;- aggregate(demand_mwys ~ yearday, df, &amp;#39;mean&amp;#39;)

# computing the smooth curve for the time series. Data is replicated before computing the curve in order to achieve continuity
smooth_yearday &amp;lt;- rbind(avg_demand_mwys_per_yearday, avg_demand_mwys_per_yearday, avg_demand_mwys_per_yearday, avg_demand_mwys_per_yearday, avg_demand_mwys_per_yearday)
smooth_yearday &amp;lt;- lowess(smooth_yearday$demand_mwys, f = 1 / 45)
l &amp;lt;- length(avg_demand_mwys_per_yearday$demand_mwys)
l0 &amp;lt;- 2 * l + 1
l1 &amp;lt;- 3 * l
smooth_yearday &amp;lt;- smooth_yearday$y[l0:l1]

# plotting the result
par(mfrow = c(1, 1))

# setting year to 2000 to allow existence of 29th February
dates &amp;lt;- as.Date(paste(levels(df$yearday), &amp;#39;2000&amp;#39;), format = &amp;#39;%m%d%Y&amp;#39;)
plot(dates, avg_demand_mwys_per_yearday$demand_mwys, type = &amp;#39;l&amp;#39;, main = &amp;#39;Mean Daily Demand&amp;#39;, xlab = &amp;#39;Time&amp;#39;, ylab = &amp;#39;Demand (GWh)&amp;#39;)
lines(dates, smooth_yearday, col = &amp;#39;yellow&amp;#39;, lwd = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1, 2))
diff &amp;lt;- avg_demand_mwys_per_yearday$demand_mwys - smooth_yearday
abs_diff &amp;lt;- abs(diff)
barplot(diff[order(-abs_diff)], main = &amp;#39;Smoothing error&amp;#39;, ylab = &amp;#39;Error&amp;#39;)
boxplot(diff, main = &amp;#39;Smoothing error&amp;#39;, ylab = &amp;#39;Error&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plotting the average daily demand of the demand less the seasonal data shows a new error rate much lower than the one seen before.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# new acf and pacf created
par(mfrow = c(1, 2))
acf(df$demand_mwys, 100, main = &amp;#39;Autocorrelation&amp;#39;)
pacf(df$demand_mwys, 100, main = &amp;#39;Partial autocorrelation&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seasonal-arima-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;seasonal ARIMA model&lt;/h2&gt;
&lt;p&gt;The initial ARIMA parameters have been found using the R &lt;span class=&#34;math inline&#34;&gt;\(auto.arima()\)&lt;/span&gt; function. The differencing parameter &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; is selected using the KPSS test. If the null hypothesis of stationarity is accepted when the KPSS is applied to the original time series, then &lt;span class=&#34;math inline&#34;&gt;\(d = 0\)&lt;/span&gt;. Otherwise, the series is differenced until the KPSS accepts the null hypothesis. After that, &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; are selected using either AIC or BIC. The SARIMA model has been created using those ARIMA parameters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model &amp;lt;- Arima(ts, order = c(2, 1, 2), list(order = c(1, 1, 1), period = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# forecast the error w/ test dataframe
auxts &amp;lt;- ts
auxmodel &amp;lt;- model
errs &amp;lt;- c()
pred &amp;lt;- c()
perc &amp;lt;- c()
for (i in 1:nrow(df_test)) {
  p &amp;lt;- as.numeric(predict(auxmodel, newdata = auxts, n.ahead = 1)$pred)
  pred &amp;lt;- c(pred, p)
  errs &amp;lt;- c(errs, p - df_test$demand[i])
  perc &amp;lt;- c(perc, (p - df_test$demand[i]) / df_test$demand[i])
  auxts &amp;lt;- ts(c(auxts, df_test$demand[i]), frequency = 7)
  auxmodel &amp;lt;- Arima(auxts, model = auxmodel)
}
par(mfrow = c(1, 1))
plot(errs, type = &amp;#39;l&amp;#39;, main = &amp;#39;Error in the forecast&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(pred, type = &amp;#39;l&amp;#39;, main = &amp;#39;Real vs. Forecast&amp;#39;, col = &amp;#39;green&amp;#39;)
lines(df_test$demand)
legend(&amp;#39;topright&amp;#39;, c(&amp;#39;Real&amp;#39;, &amp;#39;Forecast&amp;#39;), lty = 1, col = c(&amp;#39;black&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abserr &amp;lt;- mean(abs(errs))
percerr &amp;lt;- mean(abs(perc)) * 100
percerr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.299037&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mean error across test datadrame &lt;strong&gt;(2.3%)&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# special days present less demand than others. Those days may be taken into account in order to reduce the error
specialday &amp;lt;- function(day) {
  correction = 0
  if (format(day, &amp;#39;%m%d&amp;#39;) %in% c(&amp;#39;0101&amp;#39;, &amp;#39;0501&amp;#39;, &amp;#39;0106&amp;#39;, &amp;#39;0815&amp;#39;, &amp;#39;1012&amp;#39;, &amp;#39;1101&amp;#39;, &amp;#39;1206&amp;#39;, &amp;#39;1208&amp;#39;, &amp;#39;1224&amp;#39;, &amp;#39;1225&amp;#39;, &amp;#39;1226&amp;#39;, &amp;#39;1231&amp;#39;))
      correction = -100
  else if (format(day, &amp;#39;%m%d&amp;#39;) %in% c(&amp;#39;0319&amp;#39;))
    correction = -50

# on Sunday, do not apply correction
  if (as.factor(strftime(day, format = &amp;#39;%A&amp;#39;)) == &amp;#39;Sunday&amp;#39;)
    return(0)
  return(correction)
}

model &amp;lt;- Arima(ts, order = c(2, 1, 2), list(order = c(1, 1, 1), period = 7))
auxts &amp;lt;- ts
auxmodel &amp;lt;- model
errs &amp;lt;- c()
pred &amp;lt;- c()
perc &amp;lt;- c()
for (i in 1:nrow(df_test)) {
  p &amp;lt;- as.numeric(predict(auxmodel, newdata = auxts, n.ahead = 1)$pred)
  correction = specialday(df_test$date[i])
  pred &amp;lt;- c(pred, p + correction)
  errs &amp;lt;- c(errs, p + correction - df_test$demand[i])
  perc &amp;lt;- c(perc, (p + correction - df_test$demand[i]) / df_test$demand[i])
  if (!correction)
    auxts &amp;lt;- ts(c(auxts, df_test$demand[i]), frequency = 7)
  else
    auxts &amp;lt;- ts(c(auxts, p), frequency = 7)
  auxmodel &amp;lt;- Arima(auxts, model = auxmodel)
}
par(mfrow = c(1, 1))
plot(errs, type = &amp;#39;l&amp;#39;, main = &amp;#39;Error in the forecast&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(pred, type = &amp;#39;l&amp;#39;, main = &amp;#39;Real vs. Forecast&amp;#39;, col = &amp;#39;green&amp;#39;)
lines(df_test$demand)
legend(&amp;#39;topright&amp;#39;, c(&amp;#39;Real&amp;#39;, &amp;#39;Forecast&amp;#39;), lty = 1, col = c(&amp;#39;black&amp;#39;, &amp;#39;green&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abserr &amp;lt;- mean(abs(errs))
percerr &amp;lt;- mean(abs(perc)) * 100
percerr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.956568&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mean error across test dataframe &lt;strong&gt;(1,96%)&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;forecast-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Forecast Model&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(forecast(Arima(tail(ts, 200), model = model))) +
  labs(x=&amp;quot;Time&amp;quot;, y=&amp;quot;Energy Demand (GWh)&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/energyD/2019-02-02-energy-demand-analysis-w-time-series-forecasting_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Time Series Analysis</title>
      <link>/post/time_series_ap/time-series-analysis/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/time_series_ap/time-series-analysis/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;This document focuses on the analysis of the airpassengers dataframe.&lt;/p&gt;
&lt;p&gt;The AirPassenger dataset in R provides monthly totals of US airline passengers, from 1949 to 1960.&lt;/p&gt;
&lt;p&gt;Description of dataframe airpassengers can be found at &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/airpassengers.html&#34; class=&#34;uri&#34;&gt;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/airpassengers.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;research-question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Research question:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;through analysis and modelling, preview a time series forecast&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;p&gt;I will asssess whether a linear regression or arima model is a best fit for the time series forecast as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Exploratory data analysis&lt;/li&gt;
&lt;li&gt;Data decomposition&lt;/li&gt;
&lt;li&gt;Stationarity test&lt;/li&gt;
&lt;li&gt;Fit a model using an algorithm&lt;/li&gt;
&lt;li&gt;Forecasting&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(AirPassengers)
AP &amp;lt;- AirPassengers
# Take a look at the class of the dataset AirPassengers
class(AP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ts&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset is already of a time series class.&lt;/p&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Exploratory data analysis&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview of data
AP&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
## 1949 112 118 132 129 121 135 148 148 136 119 104 118
## 1950 115 126 141 135 125 149 170 170 158 133 114 140
## 1951 145 150 178 163 172 178 199 199 184 162 146 166
## 1952 171 180 193 181 183 218 230 242 209 191 172 194
## 1953 196 196 236 235 229 243 264 272 237 211 180 201
## 1954 204 188 235 227 234 264 302 293 259 229 203 229
## 1955 242 233 267 269 270 315 364 347 312 274 237 278
## 1956 284 277 317 313 318 374 413 405 355 306 271 306
## 1957 315 301 356 348 355 422 465 467 404 347 305 336
## 1958 340 318 362 348 363 435 491 505 404 359 310 337
## 1959 360 342 406 396 420 472 548 559 463 407 362 405
## 1960 417 391 419 461 472 535 622 606 508 461 390 432&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Passenger numbers in (’000) per month for the relevant years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# test for missing values
sum(is.na(AP))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zero missing values GREAT!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# test frequency
frequency(AP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;12 calendar months.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# test cycle
cycle(AP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
## 1949   1   2   3   4   5   6   7   8   9  10  11  12
## 1950   1   2   3   4   5   6   7   8   9  10  11  12
## 1951   1   2   3   4   5   6   7   8   9  10  11  12
## 1952   1   2   3   4   5   6   7   8   9  10  11  12
## 1953   1   2   3   4   5   6   7   8   9  10  11  12
## 1954   1   2   3   4   5   6   7   8   9  10  11  12
## 1955   1   2   3   4   5   6   7   8   9  10  11  12
## 1956   1   2   3   4   5   6   7   8   9  10  11  12
## 1957   1   2   3   4   5   6   7   8   9  10  11  12
## 1958   1   2   3   4   5   6   7   8   9  10  11  12
## 1959   1   2   3   4   5   6   7   8   9  10  11  12
## 1960   1   2   3   4   5   6   7   8   9  10  11  12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# dataset summary
summary(AP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   104.0   180.0   265.5   280.3   360.5   622.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Statistical values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot the raw data using the base plot function
autoplot(AP) + labs(x=&amp;quot;Time&amp;quot;, y =&amp;quot;Passenger numbers (&amp;#39;000)&amp;quot;, title=&amp;quot;Air Passengers from 1949 to 1961&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(AP~cycle(AP), xlab=&amp;quot;Passenger Numbers (&amp;#39;000)&amp;quot;, ylab=&amp;quot;Months&amp;quot;, col=rgb(0.1,0.9,0.3,0.4), main=&amp;quot;Monthly Air Passengers Boxplot from 1949 to 1961&amp;quot;, horizontal=TRUE, notch=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The passenger numbers increase over time with each year which may be indicative of an increasing linear trend. Possible due to an increase in demand for flights and commercialisation of airlines in that time period.&lt;/li&gt;
&lt;li&gt;The boxplot shows more passengers travelling in months 6 to 9 with higher averages and higher variances than the other months, indicating seasonality within an apparent cycle of 12 months. The rationale for this could be more people taking holidays and fly over the summer months in the US.&lt;/li&gt;
&lt;li&gt;The dataset appears to be a multiplicative time series, since passenger numbers increase, with a pattern of seasonality.&lt;/li&gt;
&lt;li&gt;There do not appear to be any outliers and there are no missing values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-decomposition&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data decomposition&lt;/h3&gt;
&lt;p&gt;I’ll decompose the time series for estimates of trend, seasonal, and random components using moving average method.&lt;/p&gt;
&lt;p&gt;The multiplicative model is:&lt;/p&gt;
&lt;p&gt;Y[t]=T[t]∗S[t]∗e[t]&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;Y(t) is the number of passengers at time t,
T(t) is the trend component at time t,
S(t) is the seasonal component at time t,
e(t) is the random error component at time t.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;decomposeAP &amp;lt;- decompose(AP,&amp;quot;multiplicative&amp;quot;)
autoplot(decomposeAP) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In these decomposed plots we can again see the trend and seasonality as inferred previously, but we can also observe the estimation of the random component depicted under the “remainder”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;stationarity-test&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Stationarity test&lt;/h3&gt;
&lt;p&gt;A stationary time series has the conditions that the mean, variance and covariance are not functions of time. In order to fit arima models, the time series is required to be stationary. I’ll use two methods to test the stationarity.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Test stationarity of the time series (ADF)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to test the stationarity of the time series, let’s run the Augmented Dickey-Fuller (ADF) Test. using the adf.test function from the tseries R package.&lt;/p&gt;
&lt;p&gt;First set the hypothesis test:&lt;/p&gt;
&lt;p&gt;The null hypothesis: that the time series is non stationary
The alternative hypothesis: that the time series is stationary&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adf.test(AP)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in adf.test(AP): p-value smaller than printed p-value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Augmented Dickey-Fuller Test
## 
## data:  AP
## Dickey-Fuller = -7.3186, Lag order = 5, p-value = 0.01
## alternative hypothesis: stationary&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a rule of thumb, where the p-value is less than 5%, we reject the null hypothesis. As the p-value is 0.01 which is less than 0.05 we reject the null in favour of the alternative hypothesis that the time series is stationary.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Test stationarity of the time series (Autocorrelation)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another way to test for stationarity is to use autocorrelation. I’ll use autocorrelation function (acf). This function plots the correlation between a series and its lags ie previous observations with a 95% confidence interval in blue. If the autocorrelation crosses the dashed blue line, it means that specific lag is significantly correlated with current series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(acf(AP, plot=FALSE)) + labs(title=&amp;quot;Correlogram of Air Passengers from 1949 to 1961&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The maximum at lag 1 or 12 months, indicates a positive relationship with the 12 month cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we have already created the decomposeAP list object with a random component, we can plot the acf of the decomposeAP$random.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# review random time series for any missing values
decomposeAP$random &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Jan       Feb       Mar       Apr       May       Jun       Jul
## 1949        NA        NA        NA        NA        NA        NA 0.9516643
## 1950 0.9626030 1.0714668 1.0374474 1.0140476 0.9269030 0.9650406 0.9835566
## 1951 1.0138446 1.0640180 1.0918541 1.0176651 1.0515825 0.9460444 0.9474041
## 1952 1.0258814 1.0939696 1.0134734 0.9695596 0.9632673 1.0003735 0.9468562
## 1953 0.9976684 1.0151646 1.0604644 1.0802327 1.0413329 0.9718056 0.9551933
## 1954 0.9829785 0.9232032 1.0044417 0.9943899 1.0119479 0.9978740 1.0237753
## 1955 1.0154046 0.9888241 0.9775844 1.0015732 0.9878755 1.0039635 1.0385512
## 1956 1.0066157 0.9970250 0.9876248 0.9968224 0.9985644 1.0275560 1.0217685
## 1957 0.9937293 0.9649918 0.9881769 0.9867637 0.9924177 1.0328601 1.0261250
## 1958 0.9954212 0.9522762 0.9469115 0.9383993 0.9715785 1.0261340 1.0483841
## 1959 0.9825176 0.9505736 0.9785278 0.9746440 1.0177637 0.9968613 1.0373136
## 1960 1.0039279 0.9590794 0.8940857 1.0064948 1.0173588 1.0120790        NA
##            Aug       Sep       Oct       Nov       Dec
## 1949 0.9534014 1.0022198 1.0040278 1.0062701 1.0118119
## 1950 0.9733720 1.0225047 0.9721928 0.9389527 1.0067914
## 1951 0.9397599 0.9888637 0.9938809 1.0235337 1.0250824
## 1952 0.9931171 0.9746302 1.0046687 1.0202797 1.0115407
## 1953 0.9894989 0.9934337 1.0192680 1.0009392 0.9915039
## 1954 0.9845184 0.9881036 0.9927613 0.9995143 0.9908692
## 1955 0.9831117 1.0032501 1.0003084 0.9827720 1.0125535
## 1956 1.0004765 1.0008730 0.9835071 0.9932761 0.9894251
## 1957 1.0312668 1.0236147 1.0108432 1.0212995 1.0005263
## 1958 1.0789695 0.9856540 0.9977971 0.9802940 0.9405687
## 1959 1.0531001 0.9974447 1.0013371 1.0134608 0.9999192
## 1960        NA        NA        NA        NA        NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# autoplot the random time series from 7:138 which exclude the NA values
autoplot(acf(decomposeAP$random[7:138], plot=FALSE)) + labs(title=&amp;quot;Correlogram of Air Passengers Random Component from 1949 to 1961&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;acf of the residuals are centered around zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;fit-a-model-using-an-algorithm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fit a model using an algorithm&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Linear regression Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given there is an upwards trend we’ll look at a linear model first for comparison.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(AP) + geom_smooth(method=&amp;quot;lm&amp;quot;) + labs(x=&amp;quot;Time&amp;quot;, y=&amp;quot;Passenger numbers (&amp;#39;000)&amp;quot;, title=&amp;quot;Air Passengers from 1949 to 1961&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may not be the best model to fit as it doesn’t capture the seasonality and multiplicative effects over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. ARIMA Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the auto.arima function from the forecast R package to fit the best model and coefficients, given the default parameters including seasonality as TRUE.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arimaAP &amp;lt;- auto.arima(AP)
arimaAP&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Series: AP 
## ARIMA(2,1,1)(0,1,0)[12] 
## 
## Coefficients:
##          ar1     ar2      ma1
##       0.5960  0.2143  -0.9819
## s.e.  0.0888  0.0880   0.0292
## 
## sigma^2 estimated as 132.3:  log likelihood=-504.92
## AIC=1017.85   AICc=1018.17   BIC=1029.35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ARIMA(2,1,1)(0,1,0)[12] model parameters are lag 1 differencing (d), an autoregressive term of second lag (p) and a moving average model of order 1 (q). Then the seasonal model has an autoregressive term of first lag (D) at model period 12 units, in this case months.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggtsdiag(arimaAP) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The residual plots appear to be centered around 0 as noise, with no pattern. The arima model is a fairly good fit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;forcasting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Forcasting&lt;/h3&gt;
&lt;p&gt;Plot a forecast of the time series using the forecast function, again from the forecast R package, with a 95% confidence interval where h is the forecast horizon periods in months.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forecastAP &amp;lt;- forecast(arimaAP, level = c(95), h = 36)
autoplot(forecastAP) + labs(x=&amp;quot;Time&amp;quot;, y=&amp;quot;Passenger numbers (&amp;#39;000)&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/time_series_ap/2019-01-31-time-series-analysis_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Predict the diamond price based on the 4 c&#39;s</title>
      <link>/project/diamonds/predict-the-diamond-price-based-on-the-4-c-s/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/diamonds/predict-the-diamond-price-based-on-the-4-c-s/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preamble:&lt;/h2&gt;
&lt;p&gt;This document focuses on the analysis of the diamonds data frame.&lt;/p&gt;
&lt;p&gt;Descriotion of data frame diamonds can be found at &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/diamonds.html&#34; class=&#34;uri&#34;&gt;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/diamonds.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;research-questions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Research questions:&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;am i getting a fair deal when I purchase a diamond?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The goal is to build a predictive model for diamonds, that is going to help figure out whether a given diamond is a &lt;strong&gt;good deal&lt;/strong&gt; or a &lt;strong&gt;rip-off!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of analysis:&lt;/h2&gt;
&lt;p&gt;I will use Linear Regression to predict the diamond price using other varaibles in the diamonds dataframe.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-to-know-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Get to know the Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(diamonds)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    53940 obs. of  10 variables:
##  $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...
##  $ cut    : Ord.factor w/ 5 levels &amp;quot;Fair&amp;quot;&amp;lt;&amp;quot;Good&amp;quot;&amp;lt;..: 5 4 2 4 2 3 3 3 1 3 ...
##  $ color  : Ord.factor w/ 7 levels &amp;quot;D&amp;quot;&amp;lt;&amp;quot;E&amp;quot;&amp;lt;&amp;quot;F&amp;quot;&amp;lt;&amp;quot;G&amp;quot;&amp;lt;..: 2 2 2 6 7 7 6 5 2 5 ...
##  $ clarity: Ord.factor w/ 8 levels &amp;quot;I1&amp;quot;&amp;lt;&amp;quot;SI2&amp;quot;&amp;lt;&amp;quot;SI1&amp;quot;&amp;lt;..: 2 3 5 4 2 6 7 3 4 5 ...
##  $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...
##  $ table  : num  55 61 65 58 58 57 57 55 61 61 ...
##  $ price  : int  326 326 327 334 335 336 336 337 337 338 ...
##  $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...
##  $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...
##  $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(diamonds)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      carat               cut        color        clarity     
##  Min.   :0.2000   Fair     : 1610   D: 6775   SI1    :13065  
##  1st Qu.:0.4000   Good     : 4906   E: 9797   VS2    :12258  
##  Median :0.7000   Very Good:12082   F: 9542   SI2    : 9194  
##  Mean   :0.7979   Premium  :13791   G:11292   VS1    : 8171  
##  3rd Qu.:1.0400   Ideal    :21551   H: 8304   VVS2   : 5066  
##  Max.   :5.0100                     I: 5422   VVS1   : 3655  
##                                     J: 2808   (Other): 2531  
##      depth           table           price             x         
##  Min.   :43.00   Min.   :43.00   Min.   :  326   Min.   : 0.000  
##  1st Qu.:61.00   1st Qu.:56.00   1st Qu.:  950   1st Qu.: 4.710  
##  Median :61.80   Median :57.00   Median : 2401   Median : 5.700  
##  Mean   :61.75   Mean   :57.46   Mean   : 3933   Mean   : 5.731  
##  3rd Qu.:62.50   3rd Qu.:59.00   3rd Qu.: 5324   3rd Qu.: 6.540  
##  Max.   :79.00   Max.   :95.00   Max.   :18823   Max.   :10.740  
##                                                                  
##        y                z         
##  Min.   : 0.000   Min.   : 0.000  
##  1st Qu.: 4.720   1st Qu.: 2.910  
##  Median : 5.710   Median : 3.530  
##  Mean   : 5.735   Mean   : 3.539  
##  3rd Qu.: 6.540   3rd Qu.: 4.040  
##  Max.   :58.900   Max.   :31.800  
## &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;scatterplot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Scatterplot&lt;/h1&gt;
&lt;p&gt;We’ll start by examining two variables in the set. A scatterplot is a powerful tool to help you understand the relationship between two continuous variables.&lt;/p&gt;
&lt;p&gt;We can quickly see if the relationship is linear or not. In this case, we can use a variety of diamond characteristics to help us figure out whether the price advertised for any given diamond is reasonable or a rip-off.&lt;/p&gt;
&lt;p&gt;Consider the price of a diamond and it’s carat weight.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create a scatterplot of price and carat 
ggplot(diamonds, aes(carat, price)) +
  geom_point(fill = I(&amp;quot;#F79420&amp;quot;), color = I(&amp;quot;black&amp;quot;), shape = 23) +
  xlim(0, quantile(diamonds$carat,0.99)) +
  ylim(0, quantile(diamonds$price,0.99)) +
  ggtitle(&amp;#39;Price vs. Carat&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The larger the diamond is (or the more carats it has), the more expensive the diamond is (price), which is probably what we would have expected.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create a scatterplot of price and carat with linear trend
ggplot(diamonds, aes(carat, price)) +
  geom_point(fill = I(&amp;quot;#F79420&amp;quot;), color = I(&amp;quot;black&amp;quot;), shape = 23) +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99)) ) +
  scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)) ) +
  ggtitle(&amp;quot;Price vs. Carat&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The linear trend line doesn’t go through the center of the data at some key places. It should curve in certain parts of the graph, i.e slope up more towards the end. If we tried to use this for predictions, we might be off some key places inside and outside of the existing data that we have displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## sample 10,000 diamonds from the set to get a snapshop of the large dataframe
set.seed(20022012)
diamond_samp &amp;lt;- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, 
        lower = list(continuous = wrap(&amp;quot;points&amp;quot;, shape = I(&amp;#39;.&amp;#39;))), 
        upper = list(combo = wrap(&amp;quot;box&amp;quot;, outlier.shape = I(&amp;#39;.&amp;#39;))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Price is almost linearly correlated with carat: These are the critical factors driving price.&lt;/li&gt;
&lt;li&gt;Price appears related to &lt;strong&gt;cut/color/clarity&lt;/strong&gt; but, is not very clear from this plot.&lt;/li&gt;
&lt;li&gt;Price appears not to be directly related to depth and table.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create hist of price and price(log10)
plot1 &amp;lt;- ggplot(diamonds, aes(price)) +
  geom_histogram(color = &amp;#39;blue&amp;#39;, fill = &amp;#39;blue&amp;#39;, binwidth = 200) +
  scale_x_continuous(breaks = seq(300, 19000, 1000), limit = c(300, 19000)) +
  ggtitle(&amp;#39;Price&amp;#39;) +
  theme_classic()

plot2 &amp;lt;- ggplot(diamonds, aes(price)) +
  geom_histogram(color = &amp;#39;red&amp;#39;, fill = &amp;#39;red&amp;#39;, binwidth = 0.01) +
  scale_x_log10(breaks = seq(300, 19000, 1000), limit = c(300, 19000)) +
  ggtitle(&amp;#39;Price(log10)&amp;#39;) +
  theme_classic()

grid.arrange(plot1, plot2, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Price histogram is skewed to the right, while the log10(price) tends to be a bell curve distributed. Also, the two peaks in the log10(price) plot coincides with the 1st and 3rd quantile of price.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create scatterplot of price and price(log10)
p1 &amp;lt;- ggplot(diamonds, aes(carat, price, color=clarity)) +
  geom_point() +
  ggtitle(&amp;quot;Price by Carat&amp;quot;) +
  theme_classic()

p2 &amp;lt;- ggplot(diamonds, aes(carat, price, color=clarity)) +
  geom_point() +
  scale_y_continuous(trans = log10_trans()) +
  ggtitle(&amp;quot;Price(log10) by Carat&amp;quot;) +
  theme_classic()
grid.arrange(p1, p2, ncol=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On the log scale, the prices look less dispersed at the high end of carat size and price, however, we can do better. Let’s try using the cube root of carat in light of our speculation about flaws being exponentially more likely in diamonds with more volume. Remember, volume is on a cubic scale!&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;### create a new function to transform the carat variable
cuberoot_trans = function() trans_new(&amp;#39;cuberoot&amp;#39;,
                                      transform = function(x) x^(1/3),
                                      inverse = function(x) x^3)

### use the cuberoot_trans function
ggplot(diamonds, aes(carat, price, color=clarity)) + 
  geom_point(alpha = 1/2, size = 1, position = &amp;quot;jitter&amp;quot;) + 
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
                     breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
                     breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle(&amp;#39;Price(log10) by Cube-Root of Carat&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The price(log10) is almost linear with cuberoot of carat. We can now move ahead and see how to model our data using just a linear model.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;price-vs.carat-and-clarity&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Price vs. Carat and Clarity&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## to work around overplotting, the alpha, size, and and jitter options are used in our plot
ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_point(alpha = 1/2, size = 1, position = &amp;#39;jitter&amp;#39;, aes(color=clarity)) +
  scale_color_brewer(type = &amp;#39;div&amp;#39;,
    guide = guide_legend(title = &amp;#39;Clarity&amp;#39;, reverse = T,
    override.aes = list(alpha = 1, size = 2))) +                         
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
    breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
    breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle(&amp;#39;Price(log10) by Cube-Root of Carat and Clarity&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clarity factors into the price of a diamond. Hence, a better clarity results in a higher price than lower end clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;price-vs.carat-and-cut&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Price vs. Carat and Cut&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## to work around overplotting, the alpha, size, and and jitter options are used in our plot
ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_point(alpha = 1/2, size = 1, position = &amp;#39;jitter&amp;#39;, aes(color=cut)) +
  scale_color_brewer(type = &amp;#39;div&amp;#39;,
    guide = guide_legend(title = &amp;#39;Cut&amp;#39;, reverse = T,
    override.aes = list(alpha = 1, size = 2))) +                         
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
    breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
    breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle(&amp;#39;Price(log10) by Cube-Root of Carat and Cut&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whilst cut does not show as obvious pattern as clarity, it’s still clear that with the same carat the diamonds with the best cut are priced higher. Hence, I think cut should be also included in the price prediction algorithm.
Note, clarity explains a lot of the variance found in price!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;price-vs.carat-and-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Price vs. Carat and Color&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## to work around overplotting, the alpha, size, and and jitter options are used in our plot
ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_point(alpha = 1/2, size = 1, position = &amp;#39;jitter&amp;#39;, aes(color=color)) +
  scale_color_brewer(type = &amp;#39;div&amp;#39;,
    guide = guide_legend(title = &amp;#39;Color&amp;#39;, reverse = F,
    override.aes = list(alpha = 1, size = 2))) +                         
  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
    breaks = c(0.2, 0.5, 1, 2, 3)) + 
  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
    breaks = c(350, 1000, 5000, 10000, 15000)) +
  ggtitle(&amp;#39;Price(log10) by Cube-Root of Carat and Color&amp;#39;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds) +
  geom_bar(mapping = aes(clarity, fill=cut), position = &amp;quot;fill&amp;quot; ) +
  scale_fill_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;darkgreen&amp;quot;, &amp;quot;dodgerblue&amp;quot;, &amp;quot;purple4&amp;quot;)) +
  labs(title = &amp;quot;Clearer diamonds tend to be of higher quality cut&amp;quot;,
       subtitle = &amp;quot;The majority of IF diamonds are an \&amp;quot;Ideal\&amp;quot; cut&amp;quot;) +
  ylab(&amp;quot;proportion&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/diamonds/2019-01-25-predict-the-diamond-price-based-on-the-4-c-s_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This looks similar with previous clarity plot. Color should be also considered as an factor for price.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;build-the-linear-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Build the Linear Model&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1 &amp;lt;- lm(I(log10(price)) ~ I(carat^(1/3)), diamonds)
m2 &amp;lt;- update(m1,~ . +carat)
m3 &amp;lt;- update(m2,~ . +cut)
m4 &amp;lt;- update(m3,~ . +color)
m5 &amp;lt;- update(m4,~ . +clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Calls:
## m1: lm(formula = I(log10(price)) ~ I(carat^(1/3)), data = diamonds)
## m2: lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat, data = diamonds)
## m3: lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat + cut, 
##     data = diamonds)
## m4: lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat + cut + 
##     color, data = diamonds)
## m5: lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat + cut + 
##     color + clarity, data = diamonds)
## 
## ==============================================================================================
##                        m1             m2             m3             m4              m5        
## ----------------------------------------------------------------------------------------------
##   (Intercept)          1.225***       0.451***       0.380***       0.405***        0.180***  
##                       (0.003)        (0.008)        (0.008)        (0.007)         (0.004)    
##   I(carat^(1/3))       2.414***       3.721***       3.780***       3.665***        3.971***  
##                       (0.003)        (0.014)        (0.013)        (0.012)         (0.007)    
##   carat                              -0.494***      -0.505***      -0.431***       -0.474***  
##                                      (0.005)        (0.005)        (0.004)         (0.003)    
##   cut: .L                                            0.097***       0.097***        0.052***  
##                                                     (0.002)        (0.002)         (0.001)    
##   cut: .Q                                           -0.027***      -0.027***       -0.013***  
##                                                     (0.002)        (0.001)         (0.001)    
##   cut: .C                                            0.022***       0.022***        0.006***  
##                                                     (0.001)        (0.001)         (0.001)    
##   cut: ^4                                            0.008***       0.008***       -0.001     
##                                                     (0.001)        (0.001)         (0.001)    
##   color: .L                                                        -0.162***       -0.191***  
##                                                                    (0.001)         (0.001)    
##   color: .Q                                                        -0.056***       -0.040***  
##                                                                    (0.001)         (0.001)    
##   color: .C                                                         0.001          -0.006***  
##                                                                    (0.001)         (0.001)    
##   color: ^4                                                         0.012***        0.005***  
##                                                                    (0.001)         (0.001)    
##   color: ^5                                                        -0.007***       -0.001*    
##                                                                    (0.001)         (0.001)    
##   color: ^6                                                        -0.010***        0.001     
##                                                                    (0.001)         (0.001)    
##   clarity: .L                                                                       0.394***  
##                                                                                    (0.001)    
##   clarity: .Q                                                                      -0.104***  
##                                                                                    (0.001)    
##   clarity: .C                                                                       0.057***  
##                                                                                    (0.001)    
##   clarity: ^4                                                                      -0.027***  
##                                                                                    (0.001)    
##   clarity: ^5                                                                       0.011***  
##                                                                                    (0.001)    
##   clarity: ^6                                                                      -0.001     
##                                                                                    (0.001)    
##   clarity: ^7                                                                       0.014***  
##                                                                                    (0.001)    
## ----------------------------------------------------------------------------------------------
##   R-squared            0.9236         0.9349         0.9391         0.9514          0.9839    
##   adj. R-squared       0.9236         0.9349         0.9391         0.9514          0.9839    
##   sigma                0.1218         0.1124         0.1087         0.0972          0.0559    
##   F               652012.0628    387489.3661    138654.5235     87959.4667     173791.0840    
##   p                    0.0000         0.0000         0.0000         0.0000          0.0000    
##   Log-likelihood   37025.2108     41356.3916     43150.2943     49222.9505      79078.9821    
##   Deviance           800.2475       681.5220       637.6655       509.1030        168.2821    
##   AIC             -74044.4217    -82704.7832    -86284.5886    -98417.9011    -158115.9642    
##   BIC             -74017.7348    -82669.2007    -86213.4236    -98293.3623    -157929.1560    
##   N                53940          53940          53940          53940           53940         
## ==============================================================================================&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We get some very nice R square values. We are accounting for almost all of the variance in price using carat, cut, color and clarity. If we want to know whether the price of a diamond is reasonable, we could use this model.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;thisDiamond &amp;lt;- data.frame(carat = 1, cut = &amp;#39;Very Good&amp;#39;,
                          color = &amp;#39;G&amp;#39;, clarity = &amp;#39;VS2&amp;#39;)
modelEstimate &amp;lt;- predict(m5, newdata = thisDiamond,
                         interval = &amp;quot;prediction&amp;quot;, level = .95)
10^modelEstimate&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        fit      lwr      upr
## 1 5232.111 4065.993 6732.668&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exp(modelEstimate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        fit      lwr      upr
## 1 41.20984 36.93526 45.97911&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Tidying Project</title>
      <link>/project/data_tidying/data-tidying-project/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/data_tidying/data-tidying-project/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The data hosted at [data.world] and contains information about Sales in the US.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get Data&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://data.world/retail/department-store-sales&#34;&gt;Data Set 1&lt;/a&gt;: Sales from the Retail Trade and Food Services Report from the US Census. This dataset only covers Department Stores, though the report covers a wide range of retail types. [1992-2016]&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://data.world/garyhoov/retail-sales-growth&#34;&gt;Data Set 2&lt;/a&gt; US Retail Sales by Store Type with Growth Rate [2009-2014]&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#1992-2016
#https://data.world/retail/department-store-sales

GET(&amp;quot;https://query.data.world/s/gdk7iwtlisq6vkktmybqqr7hjjty5s&amp;quot;, write_disk(tf &amp;lt;- tempfile(fileext = &amp;quot;.xls&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Response [https://download.data.world/file_download/retail/department-store-sales/retail-trade-report-department-stores.xls?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnNoYW5lbGxpcyIsImlzcyI6ImFnZW50OnNoYW5lbGxpczo6OTA5ZDZlNTQtMmQwZC00MDczLWE4Y2UtYWExNzI3OGJkN2ViIiwiaWF0IjoxNTIzOTkwNDIzLCJyb2xlIjpbInVzZXIiLCJ1c2VyX2FwaV9hZG1pbiIsInVzZXJfYXBpX3JlYWQiLCJ1c2VyX2FwaV93cml0ZSJdLCJnZW5lcmFsLXB1cnBvc2UiOmZhbHNlLCJ1cmwiOiI0YWU5NmEzZjc4Y2EyOGE5MWM1ZDZlMTgxYzg5YjI0NjIzZDY0ZThlIn0.jBFlyy1aloE-EpeYyosD3iRaDPoY75DBqdh7suLoZxKcrsG8N5GtOiFb6sNMjTqqclsHX7P8RUw7T5sAArPbcw]
##   Date: 2019-01-26 21:57
##   Status: 200
##   Content-Type: application/vnd.ms-excel
##   Size: 62.5 kB
## &amp;lt;ON DISK&amp;gt;  /tmp/RtmpbDizpx/file425bddb3fff.xls&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df1 &amp;lt;- read_excel(tf)

#2009-2014
# https://data.world/garyhoov/retail-sales-growth
GET(&amp;quot;https://query.data.world/s/py7kinxvyuxjpzwdjs2ti4wdmui6bi&amp;quot;, write_disk(tf &amp;lt;- tempfile(fileext = &amp;quot;.xls&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Response [https://download.data.world/file_download/garyhoov/retail-sales-growth/US%20Retail%20Sales%20by%20Store%20Type%202009-2014.xls?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnNoYW5lbGxpcyIsImlzcyI6ImFnZW50OnNoYW5lbGxpczo6OTA5ZDZlNTQtMmQwZC00MDczLWE4Y2UtYWExNzI3OGJkN2ViIiwiaWF0IjoxNTIzOTkwNTAwLCJyb2xlIjpbInVzZXIiLCJ1c2VyX2FwaV9hZG1pbiIsInVzZXJfYXBpX3JlYWQiLCJ1c2VyX2FwaV93cml0ZSJdLCJnZW5lcmFsLXB1cnBvc2UiOmZhbHNlLCJ1cmwiOiI5OWRhMDIwMzRlY2Q1YmZmZTRmODFjYzJlMTg4ZmUxOGQyZmEyNDdlIn0.NLTr571lKSZMKhmvIFFQGuoVeFVFr9DrQ7nxBO3LOcLTJUrKivBxWpUrcJcY8dxnkL4FlGba3wsL65c3wLzzxA]
##   Date: 2019-01-26 21:57
##   Status: 200
##   Content-Type: application/vnd.ms-excel
##   Size: 169 kB
## &amp;lt;ON DISK&amp;gt;  /tmp/RtmpbDizpx/file425b7afcc0a6.xls&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df2 &amp;lt;- read_excel(tf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## New names:
## * `` -&amp;gt; `..2`
## * `` -&amp;gt; `..3`
## * `` -&amp;gt; `..4`
## * `` -&amp;gt; `..5`
## * `` -&amp;gt; `..6`
## * … and 24 more&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## the the first row and make that the column names of the data frame
colnames(df2) &amp;lt;- df2[1,]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;save-raw-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Save Raw Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use saveRDS() to save each object as a .rds file 
saveRDS(df1, file = &amp;#39;df_department.rds&amp;#39;)
saveRDS(df2, file = &amp;#39;df_retail.rds&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;wrangle-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wrangle Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## work with df2
df_retail &amp;lt;- df2 %&amp;gt;%
  ## remove the r from the column names of df2
  magrittr::set_colnames(gsub(&amp;quot;r&amp;quot;,&amp;quot;&amp;quot;,df2[1,])) %&amp;gt;% 
  ## add a new column called &amp;quot;business&amp;quot;
  mutate(business = gsub(&amp;quot;[…]|[.]&amp;quot;,&amp;quot;&amp;quot;,`Kind of business`)) %&amp;gt;%
  ## filter to include Retail sales or Department stores sales
  filter(grepl(&amp;#39;Retail sales, total |Department stores&amp;#39;, business)) %&amp;gt;%
  ## only look at columns with year information in them
  select(.,c(matches(&amp;#39;19|20&amp;#39;),business)) %&amp;gt;%
  ## take year column and collapse them into a single column
  gather(., &amp;quot;year&amp;quot;, &amp;quot;n&amp;quot;, 1:(ncol(.)-1)) %&amp;gt;%
  ## make sure the count column `n` is numeric
  mutate(n=as.numeric(n)) %&amp;gt;%
  ## filter to only include the businesses we&amp;#39;re interested in
  filter(business == &amp;quot;Retail sales, total &amp;quot;| business==&amp;quot;Department stores &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## work with df1
df_department &amp;lt;- df1 %&amp;gt;% 
  ## split Period column into one column called &amp;quot;month&amp;quot; and one called &amp;quot;year&amp;quot;
  separate(Period, into = c(&amp;#39;month&amp;#39;, &amp;#39;year&amp;#39;), extra = &amp;#39;drop&amp;#39;, remove = FALSE) %&amp;gt;%
  ## add a column `value` which contains the 
  ## information from the `Value (in millions)` 
  mutate(value = `Value (in millions)`) %&amp;gt;%
  ## group the data frame by the `year` column
  group_by(year) %&amp;gt;%
  ## Summarize the data by creating a new column
  ## call this column `n` 
  ## have it contain the sum of the `value` column
  summarize(n = sum(value)) %&amp;gt;% 
  ### create a new column called `business`
  ## set the value of this column to  be &amp;quot;department stores&amp;quot; 
  ## for the entire data set 
  mutate(business = &amp;#39;department stores&amp;#39;) %&amp;gt;%
  ## reorder column names to be : business, year, n
  select(business, year, n)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;merging-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Merging Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Now, combine the two data frames
df_total &amp;lt;- left_join(df_retail, df_department, by = c(&amp;#39;business&amp;#39;, &amp;#39;year&amp;#39;, &amp;#39;n&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting Data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Plot Retail Sales data
ggplot(df_retail, aes(x=year,y=n,colour=business)) +
  geom_point() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/data_tidying/2019-01-14-data-tidying-project_files/figure-html/plot-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Plot Department Sales data
ggplot(df_department, aes(x=year,y=n)) +
  geom_point() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/data_tidying/2019-01-14-data-tidying-project_files/figure-html/plot-2.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Plot Combined Data
ggplot(df_total, aes(x=year,y=as.numeric(n), colour=business)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./project/data_tidying/2019-01-14-data-tidying-project_files/figure-html/plot-3.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Build A Simple Blockchain</title>
      <link>/project/simple_blockchain-project/build-a-simple-blockchain/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/simple_blockchain-project/build-a-simple-blockchain/</guid>
      <description>


&lt;div id=&#34;intro-background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro &amp;amp; Background&lt;/h1&gt;
&lt;p&gt;Blockchain is a data structure that was first introduced by Satoshi Nakamoto in the Bitcoin protocol white paper a decade ago. Bitcoin’s blockchain stores transaction data, but we can store any type of data in a blockchain.&lt;/p&gt;
&lt;p&gt;Ethereum, for example, enables users to store code snippets called ‘smart contracts’ in their blockchain. In this project, I build a simple blockchain in Python that uses proof-of-work consensus, just like the Bitcoin protocol does. There’s a lot of misunderstanding around what the blockchain is and what it can do, so I hope this project demonstrates how simple it really is. Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis Approach&lt;/h1&gt;
&lt;p&gt;You can click on the link below to see the working code in Python.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/2series/100_Days_of_ML_Code/blob/master/Simple_Blockchain.ipynb&#34; class=&#34;uri&#34;&gt;https://github.com/2series/100_Days_of_ML_Code/blob/master/Simple_Blockchain.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Password Detection Strength</title>
      <link>/project/password_detection_strength/password-detection-strength/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/password_detection_strength/password-detection-strength/</guid>
      <description>


&lt;div id=&#34;intro-background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro &amp;amp; Background&lt;/h1&gt;
&lt;p&gt;A function written that uses regular expressions to make sure the password string it is passed is strong. A strong password is defined as one that is at least eight characters long, contains both uppercase and lowercase characters, and has at least one digit. You may need to test the string against multiple regex patterns to validate its strength.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis-approach&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis Approach&lt;/h1&gt;
&lt;p&gt;You can click on the link below to see the working code in Python and reproduce it to test the strength of your own password.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/2series/100_Days_of_ML_Code/blob/master/Password_Detection_Strength.ipynb&#34; class=&#34;uri&#34;&gt;https://github.com/2series/100_Days_of_ML_Code/blob/master/Password_Detection_Strength.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>mtcars Data Analysis</title>
      <link>/post/mtcars/2019-01-03-r-rmarkdown/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/mtcars/2019-01-03-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;preamble&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Preamble:&lt;/h3&gt;
&lt;p&gt;This document focuses on the analysis of the mtcars dataframe.&lt;/p&gt;
&lt;p&gt;Description of dataframe mtcars can be found at the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;research-questions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Research questions:&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;is a vehicle with auto or manual transmission better in terms of miles p/gallons(mpg)?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;quantify the (mpg) difference between auto &amp;amp; manual transmission.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;structure-of-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Structure of analysis:&lt;/h3&gt;
&lt;p&gt;I will asssess both queries from different perspectives employing a set of methodologies that can be broadly grouped as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Univariate Analysis on target varibale (mpg).&lt;/li&gt;
&lt;li&gt;Bivariate Analysis on target varibale &amp;amp; relevant covariates.&lt;/li&gt;
&lt;li&gt;Multivariate Analysis by estimating a set of regresssion models for the conditional mean of mpg. For model selection, I compare the best fit and forward stepwise selection process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;univariate-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Univariate Analysis&lt;/h3&gt;
&lt;p&gt;Analysing the target variable alone by splitting the observations into two groups, i.e. vehicles with auto or manual transmission. I shall deploy 3 analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute sample means by group ie auto VS manual.&lt;/li&gt;
&lt;li&gt;Validate if the difference of the group means are statistically significant by computing a 95% confidence interval for means’ difference.&lt;/li&gt;
&lt;li&gt;Verify the robustness of this result by executing a permutation test with Monte Carlo trials that shuffle the allocation group &amp;gt; mpg.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;get-to-know-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get to know the data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(mtcars)
## &amp;#39;data.frame&amp;#39;:    32 obs. of  11 variables:
##  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
##  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
##  $ disp: num  160 160 108 258 360 ...
##  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
##  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
##  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
##  $ qsec: num  16.5 17 18.6 19.4 17 ...
##  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
##  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
##  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
##  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We notice that the set is relatively small! We’ll look at the desriptive statistics for each field - (min, 1st Q, Median, Mean, 3rd Q, max)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(mtcars)
##       mpg             cyl             disp             hp       
##  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
##  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
##  Median :19.20   Median :6.000   Median :196.3   Median :123.0  
##  Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
##  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
##  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
##       drat             wt             qsec             vs        
##  Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
##  1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
##  Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
##  Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
##  3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
##  Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
##        am              gear            carb      
##  Min.   :0.0000   Min.   :3.000   Min.   :1.000  
##  1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
##  Median :0.0000   Median :4.000   Median :2.000  
##  Mean   :0.4062   Mean   :3.688   Mean   :2.812  
##  3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
##  Max.   :1.0000   Max.   :5.000   Max.   :8.000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-means-by-group&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sample means by group&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### generate subset: automatic and manual cars ####
cars_auto = subset(mtcars, am == 0)
cars_manu = subset(mtcars, am == 1)

# dimensions
dim(mtcars)
## [1] 32 11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(cars_auto); dim(cars_manu)
## [1] 19 11
## [1] 13 11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sample means mpg by group
mean(cars_auto$mpg); mean(cars_manu$mpg)
## [1] 17.14737
## [1] 24.39231&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(cars_auto$mpg); sd(cars_manu$mpg)
## [1] 3.833966
## [1] 6.166504&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# % increase in mpg based on the sample mean
(mean(cars_manu$mpg) - mean(cars_auto$mpg))/mean(cars_auto$mpg)
## [1] 0.4225103&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Including plots&lt;/h3&gt;
&lt;p&gt;To get a feel for the distribution of some of the data to be analyzed, we plot some histograms, the first against mpg - auto transmission, the second against mpg - manual transission:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(mpg ~ am, data = mtcars, col=rgb(0.3,0.2,0.5,0.6), ylab = &amp;quot;mpg&amp;quot;, xlab = &amp;quot;am&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mpg empirical mean of vehicles with manual transmission is greater than cars with auto transmission, however this also has a higher variance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;confidence-interval-for-the-difference-of-the-group-means&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;95% confidence interval for the difference of the group means&lt;/h3&gt;
&lt;p&gt;The analysis on sample means concludes that sample mean of mpg for vehicles with manual trasmission is greater than automatic:&lt;/p&gt;
&lt;p&gt;Now I test if this difference (i.e. in the sample means) is statistically significant (from zero).&lt;/p&gt;
&lt;p&gt;I execute a t.test for unpaired samples: I assume inequality in variances for the two groups for the computation of the pooled variance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### 95% confidence interval for mean difference ####

# Question: is the sample mean difference significant?
t.test(cars_manu$mpg, cars_auto$mpg, paired = F, var.equal = F)
## 
##  Welch Two Sample t-test
## 
## data:  cars_manu$mpg and cars_auto$mpg
## t = 3.7671, df = 18.332, p-value = 0.001374
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##   3.209684 11.280194
## sample estimates:
## mean of x mean of y 
##  24.39231  17.14737&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;95% interval does not contain 0&lt;/li&gt;
&lt;li&gt;sample mean difference is significant at 95% (p-value 0.1%)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;permutation-test-on-groups-association&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Permutation test on groups association&lt;/h3&gt;
&lt;p&gt;I test the robustness of results obtained in the previous step.&lt;/p&gt;
&lt;p&gt;I execute a permutation test by shuffling the allocation mean &amp;gt; groups with 100,000 trials of Montecarlo simulation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### Permutation test ####
# what if I shuffle the am groups and calculate the mean?

# get target variable and group vectors
y = mtcars$mpg
group = mtcars$am
y; group
##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4
##  [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1

# baseline group means and difference
baselineMeans = tapply(mtcars$mpg, mtcars$am, mean)
baselineMeansDiff = baselineMeans[2] - baselineMeans[1]

tStat = function(w, g) mean(w[g == 1]) - mean(w[g == 0])
observedDiff = tStat(y, group)

# check if function works - should be 0:
baselineMeansDiff - observedDiff
## 1 
## 0

# execute shuffle:
permutations = sapply(1:100000, function(i) tStat(y, sample(group)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot the analysis:&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shuffle experiment results plots:
par(mfrow = c(2, 1), mar = c(4, 4, 2, 2))
hist(permutations, main = &amp;quot;Distribution of shuffled group mean differences&amp;quot;) # distribution of difference of averages of permuted groups
plot(permutations, type = &amp;quot;b&amp;quot;, main = &amp;quot;Shuffled group mean trials&amp;quot;, xlab = &amp;quot;trial&amp;quot;, ylab = &amp;quot;shuffled group mean differences&amp;quot;, ylim = c(-14, 14))
abline(h = observedDiff, col = &amp;quot;red&amp;quot;, lwd = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# there is not even 1 case where by chance I get a difference greater than the observed!
mean(permutations &amp;gt; observedDiff)
## [1] 0.00024&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;out of 100,000 trails only 0.002% has breached the observed value for the diffs in the group empirical means.&lt;/li&gt;
&lt;li&gt;concluding that empirical means diffs of groups is robust with regards to random reshuffling and is not likely to be generated by pure chance. &lt;em&gt;is this correct?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;bivariate-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bivariate Analysis&lt;/h3&gt;
&lt;p&gt;Analyse the behaviour of target variable (mpg) conditional upon a set of explanatory variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### generate subset: automatic and manual cars ####
cars_auto = subset(mtcars, am == 0)
cars_manu = subset(mtcars, am == 1)

#### Visual inspection of all covariates ####
pairs(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### 4 bivariate analysis: hp / wt / drat / disp ####
par(mfrow = c(2, 2), mar = c(2, 3, 2, 3))

# plot1
with(mtcars, plot(hp, mpg, type = &amp;quot;n&amp;quot;, main = &amp;quot;mpg vs hp - by transmission type&amp;quot;)) # no data
with(cars_auto, points(hp, mpg, col = &amp;quot;red&amp;quot;, pch = 20))
with(cars_manu, points(hp, mpg, col = &amp;quot;blue&amp;quot;, pch = 20))
legend(&amp;quot;topright&amp;quot;, pch = 20, col = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), legend = c(&amp;quot;auto&amp;quot;, &amp;quot;manu&amp;quot;)) # add legend
model1_auto = lm(mpg ~ hp, data = cars_auto)
model1_manu = lm(mpg ~ hp, data = cars_manu)
abline(model1_auto, col = &amp;quot;red&amp;quot;, lwd = 2)
abline(model1_manu, col = &amp;quot;blue&amp;quot;, lwd = 2)
abline(v = 175, lty = 2)

# plot2
with(mtcars, plot(wt, mpg, type = &amp;quot;n&amp;quot;, main = &amp;quot;mpg vs weight - by transmission type&amp;quot;)) # no data
with(cars_auto, points(wt, mpg, col = &amp;quot;red&amp;quot;, pch = 20))
with(cars_manu, points(wt, mpg, col = &amp;quot;blue&amp;quot;, pch = 20))
legend(&amp;quot;topright&amp;quot;, pch = 20, col = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), legend = c(&amp;quot;auto&amp;quot;, &amp;quot;manu&amp;quot;)) # add legend
abline(v = 3.2, lty = 2)

# plot 3
with(mtcars, plot(drat, mpg, type = &amp;quot;n&amp;quot;, main = &amp;quot;mpg vs drat - by transmission type&amp;quot;)) # no data
with(cars_auto, points(drat, mpg, col = &amp;quot;red&amp;quot;, pch = 20))
with(cars_manu, points(drat, mpg, col = &amp;quot;blue&amp;quot;, pch = 20))
legend(&amp;quot;topright&amp;quot;, pch = 20, col = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), legend = c(&amp;quot;auto&amp;quot;, &amp;quot;manu&amp;quot;)) # add legend
model2_auto = lm(mpg ~ drat, data = cars_auto)
model2_manu = lm(mpg ~ drat, data = cars_manu)
abline(model2_auto, col = &amp;quot;red&amp;quot;, lwd = 2)
abline(model2_manu, col = &amp;quot;blue&amp;quot;, lwd = 2)
abline(v = 175, lty = 2)

# plot 4
with(mtcars, plot(disp, mpg, type = &amp;quot;n&amp;quot;, main = &amp;quot;mpg vs disp - by transmission type&amp;quot;)) # no data
with(cars_auto, points(disp, mpg, col = &amp;quot;red&amp;quot;, pch = 20))
with(cars_manu, points(disp, mpg, col = &amp;quot;blue&amp;quot;, pch = 20))
legend(&amp;quot;topright&amp;quot;, pch = 20, col = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), legend = c(&amp;quot;auto&amp;quot;, &amp;quot;manu&amp;quot;)) # add legend
labels = with(mtcars, paste(as.character(disp), as.character(mpg), sep = &amp;quot;,&amp;quot;)) # generate point labels
with(mtcars, text(disp, mpg, labels = labels, cex = 0.7, pos = 2))
abline(v = 167.6, lty = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Conclusions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mpg vs hp: linear negative relation: as horse power of the engine (hp) increases, the mileage (mpg) reduces. Vehicles with manual transmission seems however to be more efficient: the group restricted regression (blue) has a higher intercept. It has to be highlighted however, that the parameters of blue regression might be influenced by two extreme values with high hp - the regression should be re-estimated by removing the two datapoints.&lt;/li&gt;
&lt;li&gt;mpg vs weight: negative relation, the functional form might be non-linear (hyperbolic ?), as weight of the vehicle increases, the mileage decreases. The weight variable seems to provide perfect separation between manual and auto transmission vehilces, i.e. all vehicles that are heavier than 3.2 ton (circa) are auto and vice-versa.&lt;/li&gt;
&lt;li&gt;mpg vs drat: the functional form is not clear: it appears also to be an increase in the variance as the rear axel ratio (drat) increases. To verify this a regression model using all observations has to be estimated and analyse the residuals for verifying if the model is heteroskedastic.&lt;/li&gt;
&lt;li&gt;mpg vs disp: seems to have a negative (hyperbolic ?) relation: as the displacement (disp) of the engine increases, the mileage decreases. Also, in this case it seems that disp accounts for perfect separation in the transmission type: almost all vehilces with disp &amp;gt; 180 are auto.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;multivariate-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Multivariate analysis&lt;/h3&gt;
&lt;p&gt;Run a set of regression models for estimating the impact of some predictions on mpg.&lt;/p&gt;
&lt;p&gt;For model selection, I employ the following techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manual selection of regressors: I hand pick regressors for:&lt;/li&gt;
&lt;li&gt;Best fit procedure&lt;/li&gt;
&lt;li&gt;Forward stepwise procedure&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;manual-selection&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Manual selection&lt;/h3&gt;
&lt;p&gt;Analysis of covariance matrix:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;### analyse covariance matrix for regressor selection:
z &amp;lt;- cor(mtcars)
require(lattice)
## Loading required package: lattice&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levelplot(z)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A model with only transmission:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only am
data = mtcars
data$am = as.factor(data$am)
model2 = lm(mpg ~ am, data = data)

# get results
summary(model2)
## 
## Call:
## lm(formula = mpg ~ am, data = data)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -9.3923 -3.0923 -0.2974  3.2439  9.5077 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)   17.147      1.125  15.247 1.13e-15 ***
## am1            7.245      1.764   4.106 0.000285 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 4.902 on 30 degrees of freedom
## Multiple R-squared:  0.3598, Adjusted R-squared:  0.3385 
## F-statistic: 16.86 on 1 and 30 DF,  p-value: 0.000285&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the intercept is 17.15: exactly the same mean of mpg for vehicles with auto transmission.&lt;/li&gt;
&lt;li&gt;the coefficient of am is 7.24: exactly the difference of mpg means for vehicles with manual / auto transmission.&lt;/li&gt;
&lt;li&gt;the sum of intercept and am coefficient gives the mpg unconditional mean for vehicles with manual transmission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;best-fit-procedure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Best Fit Procedure&lt;/h3&gt;
&lt;p&gt;Run the best fit procedure for identifying the optimal number of regressors that minimises the cp, which is (…)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### model selection using leaps ####
data = mtcars
data$log_mpg = log(data$mpg) # add log of y

#### method 1. best fit ####
regfit.full = regsubsets(log_mpg ~. , data = data, nvmax = 10)
reg.summary = summary(regfit.full)
reg.summary
## Subset selection object
## Call: regsubsets.formula(log_mpg ~ ., data = data, nvmax = 10)
## 11 Variables  (and intercept)
##      Forced in Forced out
## mpg      FALSE      FALSE
## cyl      FALSE      FALSE
## disp     FALSE      FALSE
## hp       FALSE      FALSE
## drat     FALSE      FALSE
## wt       FALSE      FALSE
## qsec     FALSE      FALSE
## vs       FALSE      FALSE
## am       FALSE      FALSE
## gear     FALSE      FALSE
## carb     FALSE      FALSE
## 1 subsets of each size up to 10
## Selection Algorithm: exhaustive
##           mpg cyl disp hp  drat wt  qsec vs  am  gear carb
## 1  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 2  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 3  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 4  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 5  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 6  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 7  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 8  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 9  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 10  ( 1 ) &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-analysis-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot the analysis&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# how I selected the optimal number of variables?
plot(reg.summary$cp, xlab = &amp;quot;Number of variables&amp;quot;, ylab = &amp;quot;cp&amp;quot;, type = &amp;quot;b&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;forward-stepwise-procedure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Forward Stepwise Procedure&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;regfit.fwd = regsubsets(log_mpg ~ ., data = data, nvmax = 10, method = &amp;quot;forward&amp;quot;)
summary(regfit.fwd)
## Subset selection object
## Call: regsubsets.formula(log_mpg ~ ., data = data, nvmax = 10, method = &amp;quot;forward&amp;quot;)
## 11 Variables  (and intercept)
##      Forced in Forced out
## mpg      FALSE      FALSE
## cyl      FALSE      FALSE
## disp     FALSE      FALSE
## hp       FALSE      FALSE
## drat     FALSE      FALSE
## wt       FALSE      FALSE
## qsec     FALSE      FALSE
## vs       FALSE      FALSE
## am       FALSE      FALSE
## gear     FALSE      FALSE
## carb     FALSE      FALSE
## 1 subsets of each size up to 10
## Selection Algorithm: forward
##           mpg cyl disp hp  drat wt  qsec vs  am  gear carb
## 1  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 2  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 3  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 4  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 5  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot; &amp;quot; 
## 6  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; 
## 7  ( 1 )  &amp;quot;*&amp;quot; &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 8  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 9  ( 1 )  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot; &amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; 
## 10  ( 1 ) &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot; &amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot; &amp;quot;*&amp;quot; &amp;quot;*&amp;quot;  &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-analysis-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot the analysis&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(regfit.fwd, scale = &amp;quot;Cp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Appendix&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A model including all regressors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### lm with all variables / no split ####
# prepare data
data = mtcars
data$am = as.factor(data$am)

model1 = lm(mpg ~ ., data = data)

# get results
summary(model1)
## 
## Call:
## lm(formula = mpg ~ ., data = data)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.4506 -1.6044 -0.1196  1.2193  4.6271 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)  
## (Intercept) 12.30337   18.71788   0.657   0.5181  
## cyl         -0.11144    1.04502  -0.107   0.9161  
## disp         0.01334    0.01786   0.747   0.4635  
## hp          -0.02148    0.02177  -0.987   0.3350  
## drat         0.78711    1.63537   0.481   0.6353  
## wt          -3.71530    1.89441  -1.961   0.0633 .
## qsec         0.82104    0.73084   1.123   0.2739  
## vs           0.31776    2.10451   0.151   0.8814  
## am1          2.52023    2.05665   1.225   0.2340  
## gear         0.65541    1.49326   0.439   0.6652  
## carb        -0.19942    0.82875  -0.241   0.8122  
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 2.65 on 21 degrees of freedom
## Multiple R-squared:  0.869,  Adjusted R-squared:  0.8066 
## F-statistic: 13.93 on 10 and 21 DF,  p-value: 3.793e-07&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-analysis-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot the analysis&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot residual analysis
par(mfrow = c(2, 2))
plot(model1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot hist
par(mfrow = c(1, 1))
hist(model1$residuals)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/mtcars/2019-01-03-r-rmarkdown_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# normality test on residuals
shapiro.test(model1$residuals)
## 
##  Shapiro-Wilk normality test
## 
## data:  model1$residuals
## W = 0.95694, p-value = 0.2261&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Renewable Energy: The New Sharing Economy</title>
      <link>/publication/whitepaper/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/whitepaper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
